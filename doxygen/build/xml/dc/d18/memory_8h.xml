<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="dc/d18/memory_8h" kind="file" language="C++">
    <compoundname>memory.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes refid="d1/d36/suN_8h" local="yes">suN.h</includes>
    <includes refid="d3/ded/spinor__field_8h" local="yes">spinor_field.h</includes>
    <incdepgraph>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="8">
        <label>spinor_field.h</label>
        <link refid="d3/ded/spinor__field_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cpu_complex.h</label>
        <link refid="d2/dfb/cpu__complex_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>suN_types.h</label>
        <link refid="d9/d21/suN__types_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>hr_complex.h</label>
        <link refid="d1/d74/hr__complex_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>tgmath.h</label>
      </node>
      <node id="3">
        <label>suN.h</label>
        <link refid="d1/d36/suN_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>memory.h</label>
        <link refid="dc/d18/memory_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="dc/d18/memory_8h_1ae4ff5a07c6ff43ed11a3887ef7d524f2" prot="public" static="no">
        <name>ALIGN</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="21" column="10" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dc/d18/memory_8h_1ab9ad00c14c9bffef082d796499345231" prot="public" static="no">
        <name>_DECLARE_MEMORY_FUNC_GAUGE</name>
        <param><defname>_name</defname></param>
        <param><defname>_field_type</defname></param>
        <param><defname>_site_type</defname></param>
        <param><defname>_size</defname></param>
        <param><defname>_human_readable</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="78" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="dc/d18/memory_8h_1a0d03ddcf46d4550d83abdcba49a03dd2" prot="public" static="no">
        <name>_DECLARE_MEMORY_FUNC_SPINOR</name>
        <param><defname>_name</defname></param>
        <param><defname>_field_type</defname></param>
        <param><defname>_site_type</defname></param>
        <param><defname>_size</defname></param>
        <param><defname>_human_readable</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="129" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="dc/d18/memory_8h_1a9da3e5d5b59b5f690eedff1152bae4ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* amalloc</definition>
        <argsstring>(size_t size, int p)</argsstring>
        <name>amalloc</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Allocated memory aligned, because this improves bandwidth. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size to be allocated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>alignment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="34" column="6" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="34" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1a235f6efccf605b4dce85f272fc3a8a25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void afree</definition>
        <argsstring>(void *addr)</argsstring>
        <name>afree</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Free memory that was allocated aligned using amalloc. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Free this pointer </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="41" column="6" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1a37abf127da9ba683f88601571fbfab15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>_DECLARE_MEMORY_FUNC_GAUGE</definition>
        <argsstring>(gfield, suNg_field, suNg, 4)</argsstring>
        <name>_DECLARE_MEMORY_FUNC_GAUGE</name>
        <param>
          <type>gfield</type>
        </param>
        <param>
          <type><ref refid="d2/d0e/structsuNg__field" kindref="compound">suNg_field</ref></type>
        </param>
        <param>
          <type><ref refid="d8/d0f/structsuNg" kindref="compound">suNg</ref></type>
        </param>
        <param>
          <type>4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="72" column="1" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="72" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1a401f9df1e49c9e979c75780050523d0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>_DECLARE_MEMORY_FUNC_GAUGE</definition>
        <argsstring>(gfield_flt, suNg_field_flt, suNg_flt, 4)</argsstring>
        <name>_DECLARE_MEMORY_FUNC_GAUGE</name>
        <param>
          <type>gfield_flt</type>
        </param>
        <param>
          <type><ref refid="d4/d1f/structsuNg__field__flt" kindref="compound">suNg_field_flt</ref></type>
        </param>
        <param>
          <type><ref refid="d1/d3e/structsuNg__flt" kindref="compound">suNg_flt</ref></type>
        </param>
        <param>
          <type>4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="73" column="1" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="73" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1a7e79c331e27cab4e78784c1ffa09686b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>_DECLARE_MEMORY_FUNC_GAUGE</definition>
        <argsstring>(gfield_f, suNf_field, suNf, 4)</argsstring>
        <name>_DECLARE_MEMORY_FUNC_GAUGE</name>
        <param>
          <type>gfield_f</type>
        </param>
        <param>
          <type><ref refid="d9/d4a/structsuNf__field" kindref="compound">suNf_field</ref></type>
        </param>
        <param>
          <type><ref refid="d0/d04/structsuNf" kindref="compound">suNf</ref></type>
        </param>
        <param>
          <type>4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="74" column="1" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="74" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1a1cd9e1e2cc443fb25a8c86d217d5d2fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>_DECLARE_MEMORY_FUNC_GAUGE</definition>
        <argsstring>(gfield_f_flt, suNf_field_flt, suNf_flt, 4)</argsstring>
        <name>_DECLARE_MEMORY_FUNC_GAUGE</name>
        <param>
          <type>gfield_f_flt</type>
        </param>
        <param>
          <type><ref refid="d6/d54/structsuNf__field__flt" kindref="compound">suNf_field_flt</ref></type>
        </param>
        <param>
          <type><ref refid="db/d3f/structsuNf__flt" kindref="compound">suNf_flt</ref></type>
        </param>
        <param>
          <type>4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="75" column="1" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="75" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1ac8b613db712171737ebaf4fe69bc6d85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>_DECLARE_MEMORY_FUNC_GAUGE</definition>
        <argsstring>(scalar_field, suNg_scalar_field, suNg_vector, 1)</argsstring>
        <name>_DECLARE_MEMORY_FUNC_GAUGE</name>
        <param>
          <type><ref refid="d8/daf/structscalar__field" kindref="compound">scalar_field</ref></type>
        </param>
        <param>
          <type><ref refid="d6/d10/structsuNg__scalar__field" kindref="compound">suNg_scalar_field</ref></type>
        </param>
        <param>
          <type><ref refid="d3/d0c/structsuNg__vector" kindref="compound">suNg_vector</ref></type>
        </param>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="76" column="1" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="76" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1a2f838156b34702376cb29be7232db52e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>_DECLARE_MEMORY_FUNC_GAUGE</definition>
        <argsstring>(avfield, suNg_av_field, suNg_algebra_vector, 4)</argsstring>
        <name>_DECLARE_MEMORY_FUNC_GAUGE</name>
        <param>
          <type>avfield</type>
        </param>
        <param>
          <type><ref refid="db/dc8/structsuNg__av__field" kindref="compound">suNg_av_field</ref></type>
        </param>
        <param>
          <type><ref refid="d3/dcb/structsuNg__algebra__vector" kindref="compound">suNg_algebra_vector</ref></type>
        </param>
        <param>
          <type>4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="77" column="1" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="77" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1aeddb7810a825b27e2c8792571b6ef645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>_DECLARE_MEMORY_FUNC_GAUGE</definition>
        <argsstring>(gtransf, suNg_field, suNg, 1)</argsstring>
        <name>_DECLARE_MEMORY_FUNC_GAUGE</name>
        <param>
          <type>gtransf</type>
        </param>
        <param>
          <type><ref refid="d2/d0e/structsuNg__field" kindref="compound">suNg_field</ref></type>
        </param>
        <param>
          <type><ref refid="d8/d0f/structsuNg" kindref="compound">suNg</ref></type>
        </param>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="78" column="1" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="78" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1a7c2ecec5115b85a03b2c19a8ebded657" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>_DECLARE_MEMORY_FUNC_GAUGE</definition>
        <argsstring>(clover_term, suNfc_field, suNfc, 4)</argsstring>
        <name>_DECLARE_MEMORY_FUNC_GAUGE</name>
        <param>
          <type>clover_term</type>
        </param>
        <param>
          <type><ref refid="df/d9e/structsuNfc__field" kindref="compound">suNfc_field</ref></type>
        </param>
        <param>
          <type><ref refid="d0/d04/structsuNf" kindref="compound">suNfc</ref></type>
        </param>
        <param>
          <type>4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="80" column="1" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="80" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1a6e88ca661f81be32ce0d4014a7a5fb92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>_DECLARE_MEMORY_FUNC_GAUGE</definition>
        <argsstring>(clover_force, suNf_field, suNf, 6)</argsstring>
        <name>_DECLARE_MEMORY_FUNC_GAUGE</name>
        <param>
          <type>clover_force</type>
        </param>
        <param>
          <type><ref refid="d9/d4a/structsuNf__field" kindref="compound">suNf_field</ref></type>
        </param>
        <param>
          <type><ref refid="d0/d04/structsuNf" kindref="compound">suNf</ref></type>
        </param>
        <param>
          <type>6</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="81" column="1" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="81" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1a6ccf05ea8346b588c7057ac8af55005f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copy_to_gpu_spinor_field_f</definition>
        <argsstring>(spinor_field *)</argsstring>
        <name>copy_to_gpu_spinor_field_f</name>
        <param>
          <type><ref refid="d0/da8/structspinor__field" kindref="compound">spinor_field</ref> *</type>
        </param>
        <briefdescription>
<para>Copy Spinor field from the host to the device by synchronizing the GPU field data with the CPU field data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/da8/structspinor__field" kindref="compound">spinor_field</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Field to be copied. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="84" column="9" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="84" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1ae70a6e7403fd9c85906a696a95498bb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copy_from_gpu_spinor_field_f</definition>
        <argsstring>(spinor_field *)</argsstring>
        <name>copy_from_gpu_spinor_field_f</name>
        <param>
          <type><ref refid="d0/da8/structspinor__field" kindref="compound">spinor_field</ref> *</type>
        </param>
        <briefdescription>
<para>Copy Spinor field from the device to the host by synchronizing the CPU field data with the GPU field data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/da8/structspinor__field" kindref="compound">spinor_field</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Field to be copied. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="84" column="49" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="84" declcolumn="49"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1a0c7a7106d137de780f4724f750229f0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void to_gpu_format_spinor_field_f</definition>
        <argsstring>(spinor_field *, spinor_field *)</argsstring>
        <name>to_gpu_format_spinor_field_f</name>
        <param>
          <type><ref refid="d0/da8/structspinor__field" kindref="compound">spinor_field</ref> *</type>
        </param>
        <param>
          <type><ref refid="d0/da8/structspinor__field" kindref="compound">spinor_field</ref> *</type>
        </param>
        <briefdescription>
<para>Convert Spinor field field data host geometry layout to device geometry layout. Read more on GPU geometry in the corresponding section in the development manual. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/da8/structspinor__field" kindref="compound">spinor_field</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Spinor field that will contain the converted field data.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="d0/da8/structspinor__field" kindref="compound">spinor_field</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Spinor field that contains the initial field data. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="84" column="91" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="84" declcolumn="91"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1a21366551cdb68276abf7181dd41f44da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void to_cpu_format_spinor_field_f</definition>
        <argsstring>(spinor_field *, spinor_field *)</argsstring>
        <name>to_cpu_format_spinor_field_f</name>
        <param>
          <type><ref refid="d0/da8/structspinor__field" kindref="compound">spinor_field</ref> *</type>
        </param>
        <param>
          <type><ref refid="d0/da8/structspinor__field" kindref="compound">spinor_field</ref> *</type>
        </param>
        <briefdescription>
<para>Convert Spinor field field data device geometry layout to host geometry layout. Read more on GPU geometry in the corresponding section in the development manual. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/da8/structspinor__field" kindref="compound">spinor_field</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Spinor field that will contain the converted field data</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="d0/da8/structspinor__field" kindref="compound">spinor_field</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Spinor field that contains the initial field data <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="84" column="136" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="84" declcolumn="136"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1a1c1390ec1e0d07663def8feac0f14de0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_spinor_field_f</definition>
        <argsstring>(spinor_field *)</argsstring>
        <name>free_spinor_field_f</name>
        <param>
          <type><ref refid="d0/da8/structspinor__field" kindref="compound">spinor_field</ref> *</type>
        </param>
        <briefdescription>
<para>Free field data, other struct fields and struct pointer of field struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="d0/da8/structspinor__field" kindref="compound">spinor_field</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Field to be freed. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="84" column="181" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="84" declcolumn="181"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1a32566af93641ab745c32e274c020366c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d0/da8/structspinor__field" kindref="compound">spinor_field</ref> *</type>
        <definition>spinor_field* alloc_spinor_field_f</definition>
        <argsstring>(unsigned int, geometry_descriptor *)</argsstring>
        <name>alloc_spinor_field_f</name>
        <param>
          <type>unsigned int</type>
        </param>
        <param>
          <type><ref refid="df/da2/structgeometry__descriptor" kindref="compound">geometry_descriptor</ref> *</type>
        </param>
        <briefdescription>
<para>Allocate field struct pointer and struct fields, in particular the field data arrays. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unsigned</parametername>
</parameternamelist>
<parameterdescription>
<para>int Number of spinors</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="df/da2/structgeometry__descriptor" kindref="compound">geometry_descriptor</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Underlying lattice geometry to allocate on. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="84" column="224" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="84" declcolumn="224"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1a99a1754aa3b3385918721f74950445b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copy_to_gpu_spinor_field_f_flt</definition>
        <argsstring>(spinor_field_flt *)</argsstring>
        <name>copy_to_gpu_spinor_field_f_flt</name>
        <param>
          <type><ref refid="d4/dce/structspinor__field__flt" kindref="compound">spinor_field_flt</ref> *</type>
        </param>
        <briefdescription>
<para>Copy Spinor field single precision from the host to the device by synchronizing the GPU field data with the CPU field data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="d4/dce/structspinor__field__flt" kindref="compound">spinor_field_flt</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Field to be copied. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="85" column="9" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="85" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1a0f2efe35f4974558f5efdf50e3946e01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copy_from_gpu_spinor_field_f_flt</definition>
        <argsstring>(spinor_field_flt *)</argsstring>
        <name>copy_from_gpu_spinor_field_f_flt</name>
        <param>
          <type><ref refid="d4/dce/structspinor__field__flt" kindref="compound">spinor_field_flt</ref> *</type>
        </param>
        <briefdescription>
<para>Copy Spinor field single precision from the device to the host by synchronizing the CPU field data with the GPU field data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="d4/dce/structspinor__field__flt" kindref="compound">spinor_field_flt</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Field to be copied. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="85" column="53" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="85" declcolumn="53"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1a3117186b0150ba15334d914563339799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void to_gpu_format_spinor_field_f_flt</definition>
        <argsstring>(spinor_field_flt *, spinor_field_flt *)</argsstring>
        <name>to_gpu_format_spinor_field_f_flt</name>
        <param>
          <type><ref refid="d4/dce/structspinor__field__flt" kindref="compound">spinor_field_flt</ref> *</type>
        </param>
        <param>
          <type><ref refid="d4/dce/structspinor__field__flt" kindref="compound">spinor_field_flt</ref> *</type>
        </param>
        <briefdescription>
<para>Convert Spinor field single precision field data host geometry layout to device geometry layout. Read more on GPU geometry in the corresponding section in the development manual. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="d4/dce/structspinor__field__flt" kindref="compound">spinor_field_flt</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Spinor field single precision that will contain the converted field data.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="d4/dce/structspinor__field__flt" kindref="compound">spinor_field_flt</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Spinor field single precision that contains the initial field data. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="85" column="99" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="85" declcolumn="99"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1ae9447cf44dd33b2e2b1f9844c55399f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void to_cpu_format_spinor_field_f_flt</definition>
        <argsstring>(spinor_field_flt *, spinor_field_flt *)</argsstring>
        <name>to_cpu_format_spinor_field_f_flt</name>
        <param>
          <type><ref refid="d4/dce/structspinor__field__flt" kindref="compound">spinor_field_flt</ref> *</type>
        </param>
        <param>
          <type><ref refid="d4/dce/structspinor__field__flt" kindref="compound">spinor_field_flt</ref> *</type>
        </param>
        <briefdescription>
<para>Convert Spinor field single precision field data device geometry layout to host geometry layout. Read more on GPU geometry in the corresponding section in the development manual. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="d4/dce/structspinor__field__flt" kindref="compound">spinor_field_flt</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Spinor field single precision that will contain the converted field data</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="d4/dce/structspinor__field__flt" kindref="compound">spinor_field_flt</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Spinor field single precision that contains the initial field data <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="85" column="148" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="85" declcolumn="148"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1a114a24ecc56e1ed19c31871704062c2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_spinor_field_f_flt</definition>
        <argsstring>(spinor_field_flt *)</argsstring>
        <name>free_spinor_field_f_flt</name>
        <param>
          <type><ref refid="d4/dce/structspinor__field__flt" kindref="compound">spinor_field_flt</ref> *</type>
        </param>
        <briefdescription>
<para>Free field data, other struct fields and struct pointer of field struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="d4/dce/structspinor__field__flt" kindref="compound">spinor_field_flt</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Field to be freed. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="85" column="197" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="85" declcolumn="197"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1a37026fbb9cb0f2ec879f1efca6ce09cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d4/dce/structspinor__field__flt" kindref="compound">spinor_field_flt</ref> *</type>
        <definition>spinor_field_flt* alloc_spinor_field_f_flt</definition>
        <argsstring>(unsigned int, geometry_descriptor *)</argsstring>
        <name>alloc_spinor_field_f_flt</name>
        <param>
          <type>unsigned int</type>
        </param>
        <param>
          <type><ref refid="df/da2/structgeometry__descriptor" kindref="compound">geometry_descriptor</ref> *</type>
        </param>
        <briefdescription>
<para>Allocate field struct pointer and struct fields, in particular the field data arrays. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unsigned</parametername>
</parameternamelist>
<parameterdescription>
<para>int Number of spinors</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="df/da2/structgeometry__descriptor" kindref="compound">geometry_descriptor</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Underlying lattice geometry to allocate on. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="85" column="248" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="85" declcolumn="248"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1aab72509542f470e2c1165faa1b7a3543" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copy_to_gpu_sfield</definition>
        <argsstring>(scalar_field *)</argsstring>
        <name>copy_to_gpu_sfield</name>
        <param>
          <type><ref refid="d8/daf/structscalar__field" kindref="compound">scalar_field</ref> *</type>
        </param>
        <briefdescription>
<para>Copy Double precision real field from the host to the device by synchronizing the GPU field data with the CPU field data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="d8/daf/structscalar__field" kindref="compound">scalar_field</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Field to be copied. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="86" column="9" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="86" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1a07f3b3636afbb530d504ec9e70becd0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copy_from_gpu_sfield</definition>
        <argsstring>(scalar_field *)</argsstring>
        <name>copy_from_gpu_sfield</name>
        <param>
          <type><ref refid="d8/daf/structscalar__field" kindref="compound">scalar_field</ref> *</type>
        </param>
        <briefdescription>
<para>Copy Double precision real field from the device to the host by synchronizing the CPU field data with the GPU field data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="d8/daf/structscalar__field" kindref="compound">scalar_field</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Field to be copied. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="86" column="41" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="86" declcolumn="41"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1a772c33d4d0d70b948c941b4cced77c38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void to_gpu_format_sfield</definition>
        <argsstring>(scalar_field *, scalar_field *)</argsstring>
        <name>to_gpu_format_sfield</name>
        <param>
          <type><ref refid="d8/daf/structscalar__field" kindref="compound">scalar_field</ref> *</type>
        </param>
        <param>
          <type><ref refid="d8/daf/structscalar__field" kindref="compound">scalar_field</ref> *</type>
        </param>
        <briefdescription>
<para>Convert Double precision real field field data host geometry layout to device geometry layout. Read more on GPU geometry in the corresponding section in the development manual. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="d8/daf/structscalar__field" kindref="compound">scalar_field</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Double precision real field that will contain the converted field data.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="d8/daf/structscalar__field" kindref="compound">scalar_field</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Double precision real field that contains the initial field data. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="86" column="75" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="86" declcolumn="75"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1aba6ec3306dc28378b93b80f293f65bf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void to_cpu_format_sfield</definition>
        <argsstring>(scalar_field *, scalar_field *)</argsstring>
        <name>to_cpu_format_sfield</name>
        <param>
          <type><ref refid="d8/daf/structscalar__field" kindref="compound">scalar_field</ref> *</type>
        </param>
        <param>
          <type><ref refid="d8/daf/structscalar__field" kindref="compound">scalar_field</ref> *</type>
        </param>
        <briefdescription>
<para>Convert Double precision real field field data device geometry layout to host geometry layout. Read more on GPU geometry in the corresponding section in the development manual. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="d8/daf/structscalar__field" kindref="compound">scalar_field</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Double precision real field that will contain the converted field data</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="d8/daf/structscalar__field" kindref="compound">scalar_field</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Double precision real field that contains the initial field data <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="86" column="112" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="86" declcolumn="112"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1a33324a5cc111ba1e2acf28ffe2aff3ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_sfield</definition>
        <argsstring>(scalar_field *)</argsstring>
        <name>free_sfield</name>
        <param>
          <type><ref refid="d8/daf/structscalar__field" kindref="compound">scalar_field</ref> *</type>
        </param>
        <briefdescription>
<para>Free field data, other struct fields and struct pointer of field struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="d8/daf/structscalar__field" kindref="compound">scalar_field</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Field to be freed. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="86" column="149" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="86" declcolumn="149"/>
      </memberdef>
      <memberdef kind="function" id="dc/d18/memory_8h_1ac891141beed3c55b4160ae7b70f51eef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="d8/daf/structscalar__field" kindref="compound">scalar_field</ref> *</type>
        <definition>scalar_field* alloc_sfield</definition>
        <argsstring>(unsigned int, geometry_descriptor *)</argsstring>
        <name>alloc_sfield</name>
        <param>
          <type>unsigned int</type>
        </param>
        <param>
          <type><ref refid="df/da2/structgeometry__descriptor" kindref="compound">geometry_descriptor</ref> *</type>
        </param>
        <briefdescription>
<para>Allocate field struct pointer and struct fields, in particular the field data arrays. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unsigned</parametername>
</parameternamelist>
<parameterdescription>
<para>int Number of spinors</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="df/da2/structgeometry__descriptor" kindref="compound">geometry_descriptor</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Underlying lattice geometry to allocate on. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" line="86" column="184" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h" declline="86" declcolumn="184"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Memory handling functions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************\</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/>Copyright<sp/>(c)<sp/>2008,<sp/>Claudio<sp/>Pica<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*<sp/>All<sp/>rights<sp/>reserved.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment">\***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MEMORY_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MEMORY_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;suN.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3/ded/spinor__field_8h" kindref="compound">spinor_field.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>P4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>ALIGN<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALIGN<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="dc/d18/memory_8h_1a9da3e5d5b59b5f690eedff1152bae4ff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="dc/d18/memory_8h_1a9da3e5d5b59b5f690eedff1152bae4ff" kindref="member">amalloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="dc/d18/memory_8h_1a235f6efccf605b4dce85f272fc3a8a25" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dc/d18/memory_8h_1a235f6efccf605b4dce85f272fc3a8a25" kindref="member">afree</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_DECLARE_MEMORY_FUNC_GAUGE(_name,<sp/>_field_type,<sp/>_site_type,<sp/>_size,<sp/>_human_readable)<sp/>\</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>copy_to_gpu_##_name(_field_type*);<sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>copy_from_gpu_##_name(_field_type*);<sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>to_gpu_format_##_name(_field_type*,<sp/>_field_type*);<sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>to_cpu_format_##_name(_field_type*,<sp/>_field_type*);<sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="84" refid="dc/d18/memory_8h_1a32566af93641ab745c32e274c020366c" refkind="member"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>free_##_name(_field_type*);<sp/>\</highlight></codeline>
<codeline lineno="85" refid="dc/d18/memory_8h_1a37026fbb9cb0f2ec879f1efca6ce09cd" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_field_type<sp/>*alloc_##_name(<ref refid="df/da2/structgeometry__descriptor" kindref="compound">geometry_descriptor</ref>*);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_DECLARE_MEMORY_FUNC_SPINOR(_name,<sp/>_field_type,<sp/>_site_type,<sp/>_size,<sp/>_human_readable)<sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>copy_to_gpu_##_name(_field_type*);<sp/>\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>copy_from_gpu_##_name(_field_type*);<sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>to_gpu_format_##_name(_field_type*,<sp/>_field_type*);<sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>to_cpu_format_##_name(_field_type*,<sp/>_field_type*);<sp/>\</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>free_##_name(_field_type*);<sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_field_type<sp/>*alloc_##_name(unsigned<sp/>int,<sp/>geometry_descriptor*);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gauge<sp/>Fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">_DECLARE_MEMORY_FUNC_GAUGE(gfield,<sp/><ref refid="d2/d0e/structsuNg__field" kindref="compound">suNg_field</ref>,<sp/><ref refid="d8/d0f/structsuNg" kindref="compound">suNg</ref>,<sp/>4);</highlight></codeline>
<codeline lineno="145"><highlight class="normal">_DECLARE_MEMORY_FUNC_GAUGE(gfield_flt,<sp/><ref refid="d4/d1f/structsuNg__field__flt" kindref="compound">suNg_field_flt</ref>,<sp/><ref refid="d1/d3e/structsuNg__flt" kindref="compound">suNg_flt</ref>,<sp/>4);</highlight></codeline>
<codeline lineno="146"><highlight class="normal">_DECLARE_MEMORY_FUNC_GAUGE(gfield_f,<sp/><ref refid="d9/d4a/structsuNf__field" kindref="compound">suNf_field</ref>,<sp/><ref refid="d0/d04/structsuNf" kindref="compound">suNf</ref>,<sp/>4);</highlight></codeline>
<codeline lineno="147"><highlight class="normal">_DECLARE_MEMORY_FUNC_GAUGE(gfield_f_flt,<sp/><ref refid="d6/d54/structsuNf__field__flt" kindref="compound">suNf_field_flt</ref>,<sp/><ref refid="db/d3f/structsuNf__flt" kindref="compound">suNf_flt</ref>,<sp/>4);</highlight></codeline>
<codeline lineno="148"><highlight class="normal">_DECLARE_MEMORY_FUNC_GAUGE(<ref refid="d8/daf/structscalar__field" kindref="compound">scalar_field</ref>,<sp/><ref refid="d6/d10/structsuNg__scalar__field" kindref="compound">suNg_scalar_field</ref>,<sp/><ref refid="d3/d0c/structsuNg__vector" kindref="compound">suNg_vector</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">_DECLARE_MEMORY_FUNC_GAUGE(avfield,<sp/><ref refid="db/dc8/structsuNg__av__field" kindref="compound">suNg_av_field</ref>,<sp/><ref refid="d3/dcb/structsuNg__algebra__vector" kindref="compound">suNg_algebra_vector</ref>,<sp/>4);</highlight></codeline>
<codeline lineno="150"><highlight class="normal">_DECLARE_MEMORY_FUNC_GAUGE(gtransf,<sp/><ref refid="d2/d0e/structsuNg__field" kindref="compound">suNg_field</ref>,<sp/><ref refid="d8/d0f/structsuNg" kindref="compound">suNg</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//_DECLARE_MEMORY_FUNC_GAUGE(clover_ldl,<sp/>ldl_field,<sp/>ldl_t,<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">_DECLARE_MEMORY_FUNC_GAUGE(clover_term,<sp/><ref refid="df/d9e/structsuNfc__field" kindref="compound">suNfc_field</ref>,<sp/><ref refid="d0/d04/structsuNf" kindref="compound">suNfc</ref>,<sp/>4);</highlight></codeline>
<codeline lineno="153"><highlight class="normal">_DECLARE_MEMORY_FUNC_GAUGE(clover_force,<sp/><ref refid="d9/d4a/structsuNf__field" kindref="compound">suNf_field</ref>,<sp/><ref refid="d0/d04/structsuNf" kindref="compound">suNf</ref>,<sp/>6);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Matter<sp/>Fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">_DECLARE_MEMORY_FUNC_SPINOR(spinor_field_f,<sp/><ref refid="d0/da8/structspinor__field" kindref="compound">spinor_field</ref>,<sp/><ref refid="d8/dd1/structsuNf__spinor" kindref="compound">suNf_spinor</ref>,<sp/>1,<sp/>Spinor<sp/>field);</highlight></codeline>
<codeline lineno="157"><highlight class="normal">_DECLARE_MEMORY_FUNC_SPINOR(spinor_field_f_flt,<sp/><ref refid="d4/dce/structspinor__field__flt" kindref="compound">spinor_field_flt</ref>,<sp/><ref refid="de/def/structsuNf__spinor__flt" kindref="compound">suNf_spinor_flt</ref>,<sp/>1,<sp/>Spinor<sp/>field<sp/>single<sp/>precision);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">_DECLARE_MEMORY_FUNC_SPINOR(sfield,<sp/><ref refid="d8/daf/structscalar__field" kindref="compound">scalar_field</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>1,<sp/>Double<sp/>precision<sp/>real<sp/>field);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>_DECLARE_MEMORY_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/memory.h"/>
  </compounddef>
</doxygen>
