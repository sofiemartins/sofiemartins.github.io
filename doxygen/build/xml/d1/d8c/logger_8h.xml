<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d1/d8c/logger_8h" kind="file" language="C++">
    <compoundname>logger.h</compoundname>
    <includes refid="d8/d5a/input__par_8h" local="yes">input_par.h</includes>
    <includedby refid="db/d97/glueballs_8h" local="yes">glueballs.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>input_par.h</label>
        <link refid="d8/d5a/input__par_8h_source"/>
      </node>
      <node id="1">
        <label>logger.h</label>
        <link refid="d1/d8c/logger_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>io.h</label>
        <link refid="dc/dac/io_8h_source"/>
      </node>
      <node id="3">
        <label>update.h</label>
        <link refid="d8/d72/update_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>logger.h</label>
        <link refid="d1/d8c/logger_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>glueballs.h</label>
        <link refid="db/d97/glueballs_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="d1/d8c/logger_8h_1a7699200450410da74d59a6e26bcc54b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int logger_map</definition>
        <argsstring>(char *name, char *filename)</argsstring>
        <name>logger_map</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" line="49" column="5" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" declline="49" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="d1/d8c/logger_8h_1a5b87c91066db333056205e241d06e06b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int logger_unmap</definition>
        <argsstring>(char *name)</argsstring>
        <name>logger_unmap</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" line="60" column="5" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" declline="60" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="d1/d8c/logger_8h_1ac268fc589b0d0bddc61386ba86c6ae02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int logger_reset</definition>
        <argsstring>()</argsstring>
        <name>logger_reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" line="68" column="5" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" declline="68" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="d1/d8c/logger_8h_1ad84d9e71536a677c152e294fbab22177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int logger_stdout</definition>
        <argsstring>(char *filename)</argsstring>
        <name>logger_stdout</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" line="82" column="5" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" declline="82" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="d1/d8c/logger_8h_1af9770438a3b1211004d9deda2fca2c69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logger_set_input</definition>
        <argsstring>(input_logger *logger)</argsstring>
        <name>logger_set_input</name>
        <param>
          <type><ref refid="dc/d37/struct__input__logger" kindref="compound">input_logger</ref> *</type>
          <declname>logger</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" line="84" column="6" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" declline="84" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d1/d8c/logger_8h_1ab8f56e8a4fab1e66d411629273306a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logger_setlevel</definition>
        <argsstring>(char *name, int v)</argsstring>
        <name>logger_setlevel</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" line="89" column="6" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" declline="89" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d1/d8c/logger_8h_1a35298c36f2f50e8da3cecff43ebde7c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int logger_getlevel</definition>
        <argsstring>(char *name)</argsstring>
        <name>logger_getlevel</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" line="90" column="5" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" declline="90" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="d1/d8c/logger_8h_1a7b7657964d1299b33d47ef7b3ed74ab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logger_rmlevel</definition>
        <argsstring>(char *name)</argsstring>
        <name>logger_rmlevel</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" line="92" column="6" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" declline="92" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d1/d8c/logger_8h_1a6a752056cabaff40e123592c6effc003" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logger_enable</definition>
        <argsstring>()</argsstring>
        <name>logger_enable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" line="95" column="6" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" declline="95" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d1/d8c/logger_8h_1a06a7102e27abaeb00215087bf771c0f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logger_disable</definition>
        <argsstring>()</argsstring>
        <name>logger_disable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" line="96" column="6" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" declline="96" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="d1/d8c/logger_8h_1aa29458650acb85a6690ce6437b1af403" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lprintf</definition>
        <argsstring>(char *name, int level, char *format,...)</argsstring>
        <name>lprintf</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" line="111" column="5" declfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h" declline="111" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/***************************************************************************\</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/>Copyright<sp/>(c)<sp/>2008,<sp/>Claudio<sp/>Pica<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3"><highlight class="comment">*<sp/>All<sp/>rights<sp/>reserved.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment">\***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LOGGER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOGGER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;input_par.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>***********************************************</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>Simple<sp/>output<sp/>logging<sp/>facility</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>***********************************************</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>SYNOPIS:<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>Messages<sp/>outputted<sp/>through<sp/>the<sp/>function</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>int<sp/>lprintf(char<sp/>*name,<sp/>int<sp/>level,<sp/>char*,<sp/>...);</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>where<sp/>name<sp/>is<sp/>an<sp/>ID,<sp/>level<sp/>defines<sp/>a<sp/>log<sp/>level,</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>can<sp/>be<sp/>written<sp/>to<sp/>file<sp/>streams<sp/>according<sp/>to<sp/>a</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>specified<sp/>map.<sp/>The<sp/>map<sp/>name<sp/>=&gt;<sp/>filename<sp/>is<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>defined<sp/>(and<sp/>can<sp/>be<sp/>modified)<sp/>using<sp/>the<sp/>library</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>functions:</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>int<sp/>logger_map(char<sp/>*name,<sp/>char<sp/>*filename);</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>int<sp/>logger_unmap(char<sp/>*name);</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>int<sp/>logger_unmap_all();</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>All<sp/>unmapped<sp/>IDs<sp/>are<sp/>written<sp/>to<sp/>the<sp/>logger</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>stdout<sp/>stream<sp/>which<sp/>can<sp/>be<sp/>set<sp/>using:</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>int<sp/>logger_stdout(char<sp/>*filename);</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>(default<sp/>=<sp/>program<sp/>stdout)</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>***********************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>map<sp/>the<sp/>ID<sp/>name<sp/>to<sp/>the<sp/>file<sp/>with<sp/>name<sp/>filename<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>filename<sp/>can<sp/>start<sp/>with<sp/>&quot;&gt;&gt;&quot;<sp/>in<sp/>which<sp/>case<sp/>the<sp/>file</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>is<sp/>open<sp/>in<sp/>append<sp/>mode</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>Returns:</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>0<sp/>=&gt;<sp/>success</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>1<sp/>=&gt;<sp/>invalid<sp/>name</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>2<sp/>=&gt;<sp/>invalid<sp/>filename</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>3<sp/>=&gt;<sp/>cannot<sp/>open<sp/>new<sp/>file</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logger_map(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>unmap<sp/>the<sp/>ID<sp/>name</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>all<sp/>subsequent<sp/>calls<sp/>to<sp/>lprintf<sp/>with<sp/>this<sp/>ID</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>are<sp/>mapped<sp/>to<sp/>the<sp/>logger<sp/>stdout</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>function<sp/>fails<sp/>the<sp/>mapping<sp/>is<sp/>unchanged</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>Returns:</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>0<sp/>=&gt;<sp/>success</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>1<sp/>=&gt;<sp/>invalid<sp/>name</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logger_unmap(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>reset<sp/>the<sp/>logger:</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>all<sp/>mappings<sp/>are<sp/>deleted</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>all<sp/>verbosity<sp/>levels<sp/>are<sp/>deleted</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>default<sp/>verbosity<sp/>level<sp/>is<sp/>set<sp/>to<sp/>0</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>logger<sp/>stdout<sp/>is<sp/>mapped<sp/>to<sp/>application<sp/>stdout</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logger_reset();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>set<sp/>the<sp/>logger<sp/>stdout<sp/>stream</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>if<sp/>filename=0<sp/>this<sp/>function<sp/>reset<sp/>the<sp/>stream<sp/>to<sp/>the<sp/></highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>program<sp/>stdout</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>NB:<sp/>if<sp/>filename<sp/>is<sp/>already<sp/>open<sp/>as<sp/>a<sp/>logger<sp/>stream<sp/>that<sp/>stream<sp/>become</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>the<sp/>logger<sp/>stdout<sp/>and<sp/>all<sp/>previously<sp/>names<sp/>mapped<sp/>to<sp/>that<sp/>stream<sp/>now<sp/>write</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>to<sp/>stdout.<sp/>If<sp/>stdout<sp/>is<sp/>then<sp/>changed<sp/>all<sp/>those<sp/>names<sp/>are<sp/>written<sp/>to<sp/>a<sp/>different<sp/></highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>stream.</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>return<sp/>codes:</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>0<sp/>=&gt;<sp/>success</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>1<sp/>=&gt;<sp/>failed<sp/>to<sp/>open<sp/>new<sp/>file<sp/>(old<sp/>logger<sp/>stdout<sp/>remains<sp/>unchanged)</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logger_stdout(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logger_set_input(<ref refid="dc/d37/struct__input__logger" kindref="compound">input_logger</ref><sp/>*logger);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>set<sp/>verbosity<sp/>level<sp/>of<sp/>the<sp/>logger<sp/></highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>if<sp/>name==0<sp/>then<sp/>set<sp/>the<sp/>default<sp/>level</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logger_setlevel(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>logger_getlevel(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>reset<sp/>verbosity<sp/>level<sp/>for<sp/>name<sp/>to<sp/>stardard<sp/>level<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logger_rmlevel(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Global<sp/>enable/disable<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logger_enable();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>logger_disable();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>log<sp/>function<sp/></highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*<sp/>write<sp/>to<sp/>the<sp/>mapped<sp/>stream<sp/>if<sp/>message<sp/>level</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>is<sp/>not<sp/>bigger<sp/>than<sp/>the<sp/>logger<sp/>verbosity<sp/>level</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>arguments:</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>name<sp/>-&gt;<sp/>ID<sp/>of<sp/>the<sp/>log<sp/>stream<sp/></highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*<sp/>level<sp/>-&gt;<sp/>log<sp/>level<sp/>of<sp/>the<sp/>message</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/>*<sp/>format<sp/>-&gt;<sp/>the<sp/>same<sp/>as<sp/>printf</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>return<sp/>value:</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>the<sp/>same<sp/>as<sp/>printf</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lprintf(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/>...);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/logger.h"/>
  </compounddef>
</doxygen>
