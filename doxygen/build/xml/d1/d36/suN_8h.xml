<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="d1/d36/suN_8h" kind="file" language="C++">
    <compoundname>suN.h</compoundname>
    <includes refid="d9/d21/suN__types_8h" local="yes">suN_types.h</includes>
    <includedby refid="d3/dde/clover__exp_8h" local="yes">clover_exp.h</includedby>
    <includedby refid="da/d6a/clover__tools_8h" local="yes">clover_tools.h</includedby>
    <includedby refid="dc/d1e/disconnected_8h" local="yes">disconnected.h</includedby>
    <includedby refid="d8/d00/gamma__spinor_8h" local="yes">gamma_spinor.h</includedby>
    <includedby refid="d8/d7d/gaugefix_8h" local="yes">gaugefix.h</includedby>
    <includedby refid="db/d97/glueballs_8h" local="yes">glueballs.h</includedby>
    <includedby refid="dc/dac/io_8h" local="yes">io.h</includedby>
    <includedby refid="dc/d9c/linear__algebra_8h" local="yes">linear_algebra.h</includedby>
    <includedby refid="dc/d18/memory_8h" local="yes">memory.h</includedby>
    <includedby refid="d0/d30/observables_8h" local="yes">observables.h</includedby>
    <includedby refid="d6/d71/propagator_8h" local="yes">propagator.h</includedby>
    <includedby refid="d1/d79/random_8h" local="yes">random.h</includedby>
    <includedby refid="d5/dbc/rational__functions_8h" local="yes">rational_functions.h</includedby>
    <includedby refid="df/dc5/scattering_8h" local="yes">scattering.h</includedby>
    <includedby refid="d6/d16/spectrum_8h" local="yes">spectrum.h</includedby>
    <includedby refid="d8/d1e/spin__matrix_8h" local="yes">spin_matrix.h</includedby>
    <includedby refid="d8/d72/update_8h" local="yes">update.h</includedby>
    <includedby refid="d3/df8/wilsonflow_8h" local="yes">wilsonflow.h</includedby>
    <incdepgraph>
      <node id="4">
        <label>cpu_complex.h</label>
        <link refid="d2/dfb/cpu__complex_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>suN_types.h</label>
        <link refid="d9/d21/suN__types_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>hr_complex.h</label>
        <link refid="d1/d74/hr__complex_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>tgmath.h</label>
      </node>
      <node id="1">
        <label>suN.h</label>
        <link refid="d1/d36/suN_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="8">
        <label>gaugefix.h</label>
        <link refid="d8/d7d/gaugefix_8h_source"/>
      </node>
      <node id="16">
        <label>rational_functions.h</label>
        <link refid="d5/dbc/rational__functions_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>disconnected.h</label>
        <link refid="dc/d1e/disconnected_8h_source"/>
      </node>
      <node id="3">
        <label>clover_tools.h</label>
        <link refid="da/d6a/clover__tools_8h_source"/>
      </node>
      <node id="5">
        <label>gamma_spinor.h</label>
        <link refid="d8/d00/gamma__spinor_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>io.h</label>
        <link refid="dc/dac/io_8h_source"/>
      </node>
      <node id="19">
        <label>wilsonflow.h</label>
        <link refid="d3/df8/wilsonflow_8h_source"/>
      </node>
      <node id="14">
        <label>observables.h</label>
        <link refid="d0/d30/observables_8h_source"/>
      </node>
      <node id="18">
        <label>spectrum.h</label>
        <link refid="d6/d16/spectrum_8h_source"/>
      </node>
      <node id="12">
        <label>linear_algebra.h</label>
        <link refid="dc/d9c/linear__algebra_8h_source"/>
      </node>
      <node id="7">
        <label>spin_matrix.h</label>
        <link refid="d8/d1e/spin__matrix_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>update.h</label>
        <link refid="d8/d72/update_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>propagator.h</label>
        <link refid="d6/d71/propagator_8h_source"/>
      </node>
      <node id="17">
        <label>scattering.h</label>
        <link refid="df/dc5/scattering_8h_source"/>
      </node>
      <node id="1">
        <label>suN.h</label>
        <link refid="d1/d36/suN_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>memory.h</label>
        <link refid="dc/d18/memory_8h_source"/>
      </node>
      <node id="15">
        <label>random.h</label>
        <link refid="d1/d79/random_8h_source"/>
      </node>
      <node id="9">
        <label>glueballs.h</label>
        <link refid="db/d97/glueballs_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>clover_exp.h</label>
        <link refid="d3/dde/clover__exp_8h_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="d1/d36/suN_8h_1a85be5afb7db005e1b1de31dbe0cd3879" prot="public" static="no">
        <name>_vector_zero_g</name>
        <param><defname>r</defname></param>
        <initializer>   _complex_0((r).c[0]); \
   _complex_0((r).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="24" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a5427304f75489d86dd05fab7e79b9a73" prot="public" static="no">
        <name>_vector_minus_g</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_minus((r).c[0],(s).c[0]); \
   _complex_minus((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="29" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a9dc140e77d0ebf4a9980706121b95d01" prot="public" static="no">
        <name>_vector_i_plus_g</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_i_plus((r).c[0],(s).c[0]); \
   _complex_i_plus((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="34" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ad0e867afb99e1e9093d3f66a103f7212" prot="public" static="no">
        <name>_vector_i_minus_g</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_i_minus((r).c[0],(s).c[0]); \
   _complex_i_minus((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="39" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a9c6b489a9f97a5717a6ac35523c1d21b" prot="public" static="no">
        <name>_vector_mul_g</name>
        <param><defname>r</defname></param>
        <param><defname>k</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_mulr((r).c[0],(k),(s).c[0]); \
   _complex_mulr((r).c[1],(k),(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="44" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ae84afe07b650ef42d196233d3a1a38df" prot="public" static="no">
        <name>_vector_mulc_g</name>
        <param><defname>r</defname></param>
        <param><defname>z</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_mul((r).c[0],(z),(s).c[0]); \
   _complex_mul((r).c[1],(z),(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="49" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a536ec163a6f0ba972d388439c85f5357" prot="public" static="no">
        <name>_vector_mulc_star_g</name>
        <param><defname>r</defname></param>
        <param><defname>z</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_mul_star((r).c[0],(s).c[0],(z)); \
   _complex_mul_star((r).c[1],(s).c[1],(z))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="54" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aaf7cb66d3eab1dc2f08c737a785f3c03" prot="public" static="no">
        <name>_vector_add_g</name>
        <param><defname>r</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>   _complex_add((r).c[0],(s1).c[0],(s2).c[0]); \
   _complex_add((r).c[1],(s1).c[1],(s2).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="59" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a9866c2057517f742e8a7572fa503fe51" prot="public" static="no">
        <name>_vector_sub_g</name>
        <param><defname>r</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>   _complex_sub((r).c[0],(s1).c[0],(s2).c[0]); \
   _complex_sub((r).c[1],(s1).c[1],(s2).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="64" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a6e4955a6989d89b42a69f0d8bc7be3d8" prot="public" static="no">
        <name>_vector_i_add_g</name>
        <param><defname>r</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>   _complex_i_add((r).c[0],(s1).c[0],(s2).c[0]); \
   _complex_i_add((r).c[1],(s1).c[1],(s2).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="69" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a1adcdef3be15a249d66478618e579f39" prot="public" static="no">
        <name>_vector_i_sub_g</name>
        <param><defname>r</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>   _complex_i_sub((r).c[0],(s1).c[0],(s2).c[0]); \
   _complex_i_sub((r).c[1],(s1).c[1],(s2).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="74" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a049e1f0243a3243bafaa404a73f4a464" prot="public" static="no">
        <name>_vector_add_assign_g</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_add_assign((r).c[0],(s).c[0]); \
   _complex_add_assign((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="79" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aba28cae7388a005d04384c4bec51ee65" prot="public" static="no">
        <name>_vector_sub_assign_g</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_sub_assign((r).c[0],(s).c[0]); \
   _complex_sub_assign((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="84" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ae46a96f9f480ffbc7a1a2ef7e679b3a1" prot="public" static="no">
        <name>_vector_i_add_assign_g</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_i_add_assign((r).c[0],(s).c[0]); \
   _complex_i_add_assign((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="89" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a4efef55c92bfc00903313b45deef9421" prot="public" static="no">
        <name>_vector_i_sub_assign_g</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_i_sub_assign((r).c[0],(s).c[0]); \
   _complex_i_sub_assign((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="94" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a96d16a9b636c5a0fd109a16c817287d1" prot="public" static="no">
        <name>_vector_prod_g</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   (k)=_complex_prod((r).c[0],(s).c[0]);\
   (k)+=_complex_prod((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="99" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a34f3242d771a9f165246b1998d6806e7" prot="public" static="no">
        <name>_vector_prod_re_g</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   (k)=_complex_prod_re((r).c[0],(s).c[0]);\
   (k)+=_complex_prod_re((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="104" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a387bc49fc571b9bde3d48d537d7f3c51" prot="public" static="no">
        <name>_vector_prod_im_g</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   (k)=_complex_prod_im((r).c[0],(s).c[0]);\
   (k)+=_complex_prod_im((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="109" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aa5d4bb26b617c5ab5b831cc4f04e28a7" prot="public" static="no">
        <name>_vector_mulc_add_assign_g</name>
        <param><defname>r</defname></param>
        <param><defname>z</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_mul_assign((r).c[0],(z),(s).c[0]); \
   _complex_mul_assign((r).c[1],(z),(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="114" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a0c3587a2842c9d0dd048fda812b00b53" prot="public" static="no">
        <name>_vector_mul_add_assign_g</name>
        <param><defname>r</defname></param>
        <param><defname>k</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_mulr_assign((r).c[0],(k),(s).c[0]); \
   _complex_mulr_assign((r).c[1],(k),(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="119" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a7545f099f47d5a2bf5874aff8622e961" prot="public" static="no">
        <name>_vector_lc_g</name>
        <param><defname>r</defname></param>
        <param><defname>k1</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>k2</defname></param>
        <param><defname>s2</defname></param>
        <initializer>   _complex_rlc((r).c[0],(k1),(s1).c[0],(k2),(s2).c[0]); \
   _complex_rlc((r).c[1],(k1),(s1).c[1],(k2),(s2).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="124" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a8e85deee3d7e0156abcc3f005a6ecab6" prot="public" static="no">
        <name>_vector_lc_add_assign_g</name>
        <param><defname>r</defname></param>
        <param><defname>k1</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>k2</defname></param>
        <param><defname>s2</defname></param>
        <initializer>   _complex_rlc_assign((r).c[0],(k1),(s1).c[0],(k2),(s2).c[0]); \
   _complex_rlc_assign((r).c[1],(k1),(s1).c[1],(k2),(s2).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="129" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a46feeb8171af90098e308050b090f101" prot="public" static="no">
        <name>_vector_clc_g</name>
        <param><defname>r</defname></param>
        <param><defname>z1</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>z2</defname></param>
        <param><defname>s2</defname></param>
        <initializer>   _complex_clc((r).c[0],(z1),(s1).c[0],(z2),(s2).c[0]); \
   _complex_clc((r).c[1],(z1),(s1).c[1],(z2),(s2).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="134" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aa7dee44d7014023b73fe4efa028adda3" prot="public" static="no">
        <name>_vector_clc_add_assign_g</name>
        <param><defname>r</defname></param>
        <param><defname>z1</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>z2</defname></param>
        <param><defname>s2</defname></param>
        <initializer>   _complex_clc_assign((r).c[0],(z1),(s1).c[0],(z2),(s2).c[0]); \
   _complex_clc_assign((r).c[1],(z1),(s1).c[1],(z2),(s2).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="139" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ab79ae8666d58256f507a0b969d495b14" prot="public" static="no">
        <name>_vector_prod_assign_g</name>
        <param><defname>z</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_prod_assign((z),(r).c[0],(s).c[0]); \
   _complex_prod_assign((z),(r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="144" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a0913ceccfdbdcbaa14b9f0a2632b131e" prot="public" static="no">
        <name>_vector_prod_add_assign_re_g</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   (k)+=_complex_prod_re((r).c[0],(s).c[0]);\
   (k)+=_complex_prod_re((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="149" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1afb80bded151168d0bfd20d7fb823a6fc" prot="public" static="no">
        <name>_vector_prod_add_assign_im_g</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   (k)+=_complex_prod_im((r).c[0],(s).c[0]);\
   (k)+=_complex_prod_im((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="154" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a0bb0164e52bac7fdc1d3d39b16f24f6d" prot="public" static="no">
        <name>_vector_prod_sub_assign_re_g</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   (k)-=_complex_prod_re((r).c[0],(s).c[0]);\
   (k)-=_complex_prod_re((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="159" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a37e6b7ab7d997fe97449fa22f1686b99" prot="public" static="no">
        <name>_vector_prod_sub_assign_im_g</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   (k)-=_complex_prod_im((r).c[0],(s).c[0]);\
   (k)-=_complex_prod_im((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="164" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a0d499c789a4c8d230eec77eeb8db1266" prot="public" static="no">
        <name>_vector_project_g</name>
        <param><defname>r</defname></param>
        <param><defname>z</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_mul_sub_assign((r).c[0],(z),(s).c[0]); \
   _complex_mul_sub_assign((r).c[1],(z),(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="169" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a7a47229e4b8bf0ea435d6b316463cb25" prot="public" static="no">
        <name>_algebra_vector_add_assign_g</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>      (r).c[0]+=(s).c[0]; \
      (r).c[1]+=(s).c[1]; \
      (r).c[2]+=(s).c[2]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="174" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a0568fd0418c6bd3c3819331c57f03403" prot="public" static="no">
        <name>_algebra_vector_sub_assign_g</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>      (r).c[0]-=(s).c[0]; \
      (r).c[1]-=(s).c[1]; \
      (r).c[2]-=(s).c[2]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="180" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a395895e00fc4316422d0cc914408ec31" prot="public" static="no">
        <name>_algebra_vector_mul_add_assign_g</name>
        <param><defname>r</defname></param>
        <param><defname>k</defname></param>
        <param><defname>s</defname></param>
        <initializer>      (r).c[0]+=(k)*(s).c[0]; \
      (r).c[1]+=(k)*(s).c[1]; \
      (r).c[2]+=(k)*(s).c[2]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="186" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1af25f69607c2dc691eec8233a8d933874" prot="public" static="no">
        <name>_algebra_vector_mul_g</name>
        <param><defname>r</defname></param>
        <param><defname>k</defname></param>
        <param><defname>s</defname></param>
        <initializer>      (r).c[0]=(k)*(s).c[0]; \
      (r).c[1]=(k)*(s).c[1]; \
      (r).c[2]=(k)*(s).c[2]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="192" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ad75b0c80844f7b7cc22db0dda1a885e1" prot="public" static="no">
        <name>_algebra_vector_zero_g</name>
        <param><defname>r</defname></param>
        <initializer>      (r).c[0]=0.; \
      (r).c[1]=0.; \
      (r).c[2]=0.</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="198" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a07ae132389b242edee35a1ddb755ba78" prot="public" static="no">
        <name>_algebra_vector_sqnorm_g</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <initializer>   (k)=((r).c[0]*(r).c[0])+ \
       ((r).c[1]*(r).c[1])+ \
       ((r).c[2]*(r).c[2])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="204" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a0a9c9f6c2fe6b47c75312578d27971cb" prot="public" static="no">
        <name>_suNg_dagger</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <initializer>   _complex_star((u).c[0],(v).c[0]); \
   _complex_star((u).c[1],(v).c[2]); \
   _complex_star((u).c[2],(v).c[1]); \
   _complex_star((u).c[3],(v).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="218" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ae2d3b6356be84a22069ce4299412ad23" prot="public" static="no">
        <name>_suNg_times_suNg</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <param><defname>w</defname></param>
        <initializer>      _complex_mul((u).c[0],(v).c[0],(w).c[0]);\
      _complex_mul_assign((u).c[0],(v).c[1],(w).c[2]); \
      _complex_mul((u).c[1],(v).c[0],(w).c[1]);\
      _complex_mul_assign((u).c[1],(v).c[1],(w).c[3]); \
      _complex_mul((u).c[2],(v).c[2],(w).c[0]);\
      _complex_mul_assign((u).c[2],(v).c[3],(w).c[2]); \
      _complex_mul((u).c[3],(v).c[2],(w).c[1]);\
      _complex_mul_assign((u).c[3],(v).c[3],(w).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="225" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a5d6a9bbaf681b9e182487701fe7b4fa5" prot="public" static="no">
        <name>_suNg_times_suNg_assign</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <param><defname>w</defname></param>
        <initializer>      _complex_mul_assign((u).c[0],(v).c[0],(w).c[0]);\
      _complex_mul_assign((u).c[0],(v).c[1],(w).c[2]); \
      _complex_mul_assign((u).c[1],(v).c[0],(w).c[1]);\
      _complex_mul_assign((u).c[1],(v).c[1],(w).c[3]); \
      _complex_mul_assign((u).c[2],(v).c[2],(w).c[0]);\
      _complex_mul_assign((u).c[2],(v).c[3],(w).c[2]); \
      _complex_mul_assign((u).c[3],(v).c[2],(w).c[1]);\
      _complex_mul_assign((u).c[3],(v).c[3],(w).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="236" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a11e8df72f02bffca6f99c2b778b6821c" prot="public" static="no">
        <name>_suNg_times_suNg_dagger</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <param><defname>w</defname></param>
        <initializer>      _complex_mul_star((u).c[0],(v).c[0],(w).c[0]);\
      _complex_mul_star_assign((u).c[0],(v).c[1],(w).c[1]); \
      _complex_mul_star((u).c[1],(v).c[0],(w).c[2]);\
      _complex_mul_star_assign((u).c[1],(v).c[1],(w).c[3]); \
      _complex_mul_star((u).c[2],(v).c[2],(w).c[0]);\
      _complex_mul_star_assign((u).c[2],(v).c[3],(w).c[1]); \
      _complex_mul_star((u).c[3],(v).c[2],(w).c[2]);\
      _complex_mul_star_assign((u).c[3],(v).c[3],(w).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="247" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a2c43c975a6df73e1779f8ce2a977b4fc" prot="public" static="no">
        <name>_suNg_dagger_times_suNg</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <param><defname>w</defname></param>
        <initializer>      _complex_mul_star((u).c[0],(w).c[0],(v).c[0]);\
      _complex_mul_star_assign((u).c[0],(w).c[2],(v).c[2]); \
      _complex_mul_star((u).c[1],(w).c[1],(v).c[0]);\
      _complex_mul_star_assign((u).c[1],(w).c[3],(v).c[2]); \
      _complex_mul_star((u).c[2],(w).c[0],(v).c[1]);\
      _complex_mul_star_assign((u).c[2],(w).c[2],(v).c[3]); \
      _complex_mul_star((u).c[3],(w).c[1],(v).c[1]);\
      _complex_mul_star_assign((u).c[3],(w).c[3],(v).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="258" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a90c89be19ad620f10e4b224317f85942" prot="public" static="no">
        <name>_suNg_unit</name>
        <param><defname>u</defname></param>
        <initializer>   _complex_1((u).c[0]);\
   _complex_0((u).c[1]);\
   _complex_0((u).c[2]);\
   _complex_1((u).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="269" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a412dcaa513dd05a94c2b0ba43694bdb6" prot="public" static="no">
        <name>_suNg_minus</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <initializer>   _complex_minus((u).c[0],(v).c[0]);\
   _complex_minus((u).c[1],(v).c[1]);\
   _complex_minus((u).c[2],(v).c[2]);\
   _complex_minus((u).c[3],(v).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="276" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1af881f8524b9abbb1623f40cbd25bbc2d" prot="public" static="no">
        <name>_suNg_mul</name>
        <param><defname>u</defname></param>
        <param><defname>r</defname></param>
        <param><defname>v</defname></param>
        <initializer>   _complex_mulr((u).c[0],(r),(v).c[0]);\
   _complex_mulr((u).c[1],(r),(v).c[1]);\
   _complex_mulr((u).c[2],(r),(v).c[2]);\
   _complex_mulr((u).c[3],(r),(v).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="283" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a67c9b9b58a2687f0defd7c4fef0aacc8" prot="public" static="no">
        <name>_suNg_mul_assign</name>
        <param><defname>u</defname></param>
        <param><defname>r</defname></param>
        <initializer>   (u).c[0]*=(r);\
   (u).c[1]*=(r);\
   (u).c[2]*=(r);\
   (u).c[3]*=(r)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="290" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ab6b771f79592a90c991be0704593b3a4" prot="public" static="no">
        <name>_suNg_mulc</name>
        <param><defname>u</defname></param>
        <param><defname>r</defname></param>
        <param><defname>v</defname></param>
        <initializer>   _complex_mul((u).c[0],(r),(v).c[0]);\
   _complex_mul((u).c[1],(r),(v).c[1]);\
   _complex_mul((u).c[2],(r),(v).c[2]);\
   _complex_mul((u).c[3],(r),(v).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="297" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a8c000853a79d0b17706eb243f8911501" prot="public" static="no">
        <name>_suNg_mul_add</name>
        <param><defname>u</defname></param>
        <param><defname>r</defname></param>
        <param><defname>v</defname></param>
        <param><defname>m</defname></param>
        <param><defname>w</defname></param>
        <initializer>   (u).c[0]=(r)*(v).c[0]+(m)*(w).c[0];\
   (u).c[1]=(r)*(v).c[1]+(m)*(w).c[1];\
   (u).c[2]=(r)*(v).c[2]+(m)*(w).c[2];\
   (u).c[3]=(r)*(v).c[3]+(m)*(w).c[3]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="304" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1add0dcfd3ba12e10b207b224daed052e2" prot="public" static="no">
        <name>_suNg_add_assign</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <initializer>   _complex_add_assign((u).c[0],(v).c[0]);\
   _complex_add_assign((u).c[1],(v).c[1]);\
   _complex_add_assign((u).c[2],(v).c[2]);\
   _complex_add_assign((u).c[3],(v).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="311" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a2fd11a70d54d5791ededebbbebb49de7" prot="public" static="no">
        <name>_suNg_sub_assign</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <initializer>   _complex_sub_assign((u).c[0],(v).c[0]);\
   _complex_sub_assign((u).c[1],(v).c[1]);\
   _complex_sub_assign((u).c[2],(v).c[2]);\
   _complex_sub_assign((u).c[3],(v).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="318" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a0885ceddfc27521a4c5367f1f2975886" prot="public" static="no">
        <name>_suNg_sqnorm</name>
        <param><defname>k</defname></param>
        <param><defname>u</defname></param>
        <initializer>   (k)=0.;\
   (k)+=_complex_prod_re((u).c[0],(u).c[0]); \
   (k)+=_complex_prod_re((u).c[1],(u).c[1]); \
   (k)+=_complex_prod_re((u).c[2],(u).c[2]); \
   (k)+=_complex_prod_re((u).c[3],(u).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="325" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ad3a7f9f9852e627bae4ffacd7eb50e8c" prot="public" static="no">
        <name>_suNg_sqnorm_m1</name>
        <param><defname>k</defname></param>
        <param><defname>u</defname></param>
        <initializer>   (k)=\
    +_complex_prod_m1_re((u).c[0],(u).c[0])\
    +_complex_prod_re((u).c[1],(u).c[1])\
    +_complex_prod_re((u).c[2],(u).c[2])\
    +_complex_prod_m1_re((u).c[3],(u).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="333" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a3dd2d03cce8ef79a6ac257517328ff5c" prot="public" static="no">
        <name>_suNg_trace</name>
        <param><defname>k</defname></param>
        <param><defname>u</defname></param>
        <initializer>   (k)=((u).c[0])+ \
       ((u).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="341" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aa97103d2735d2c3501775f0998fd810d" prot="public" static="no">
        <name>_suNg_trace_re</name>
        <param><defname>k</defname></param>
        <param><defname>u</defname></param>
        <initializer>   (k)=_complex_re((u).c[0])+ \
       _complex_re((u).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="346" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a779553a0e35882f7738e068e412b6a76" prot="public" static="no">
        <name>_suNg_trace_im</name>
        <param><defname>k</defname></param>
        <param><defname>u</defname></param>
        <initializer>   (k)=_complex_im((u).c[0])+ \
       _complex_im((u).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="351" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ac9a25da81d5ccbc616d811c45c48b5a2" prot="public" static="no">
        <name>_suNg_FMAT</name>
        <param><defname>u</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_mul_star_assign((u).c[0],(s).c[0].c[0],(s).c[2].c[0]); \
   _complex_mul_star_assign((u).c[0],(s).c[1].c[0],(s).c[3].c[0]);\
   _complex_mul_star_assign((u).c[1],(s).c[0].c[0],(s).c[2].c[1]); \
   _complex_mul_star_assign((u).c[1],(s).c[1].c[0],(s).c[3].c[1]);\
   _complex_mul_star_assign((u).c[2],(s).c[0].c[1],(s).c[2].c[0]); \
   _complex_mul_star_assign((u).c[2],(s).c[1].c[1],(s).c[3].c[0]);\
   _complex_mul_star_assign((u).c[3],(s).c[0].c[1],(s).c[2].c[1]); \
   _complex_mul_star_assign((u).c[3],(s).c[1].c[1],(s).c[3].c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="357" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a34a1286430a709674e77042a03d0df27" prot="public" static="no">
        <name>_suNg_multiply</name>
        <param><defname>r</defname></param>
        <param><defname>u</defname></param>
        <param><defname>s</defname></param>
        <initializer>      _complex_mul((r).c[0],(u).c[0],(s).c[0]);\
      _complex_mul_assign((r).c[0],(u).c[1],(s).c[1]); \
      _complex_mul((r).c[1],(u).c[2],(s).c[0]);\
      _complex_mul_assign((r).c[1],(u).c[3],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="369" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a16bbd35194adc6224ebdf442da17534b" prot="public" static="no">
        <name>_suNg_inverse_multiply</name>
        <param><defname>r</defname></param>
        <param><defname>u</defname></param>
        <param><defname>s</defname></param>
        <initializer>      _complex_mul_star((r).c[0],(s).c[0],(u).c[0]);\
      _complex_mul_star_assign((r).c[0],(s).c[1],(u).c[2]); \
      _complex_mul_star((r).c[1],(s).c[0],(u).c[1]);\
      _complex_mul_star_assign((r).c[1],(s).c[1],(u).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="377" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a9e9345a67cad7ce24fdddaa5198913b6" prot="public" static="no">
        <name>_suNg_zero</name>
        <param><defname>u</defname></param>
        <initializer>    _complex_0((u).c[0]);\
    _complex_0((u).c[1]);\
    _complex_0((u).c[2]);\
    _complex_0((u).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="384" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a77d1c022c8fb498f1d82968c44f51bce" prot="public" static="no">
        <name>_suNgc_multiply</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <initializer>_suNg_multiply(a,b,c)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="390" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a576e76eeff44208f1347f1118acdd8cd" prot="public" static="no">
        <name>_suNgc_inverse_multiply</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <initializer>_suNg_inverse_multiply(a,b,c)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="392" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ae639de20443e6db4ef272155fd735d6e" prot="public" static="no">
        <name>_suNgc_zero</name>
        <param><defname>a</defname></param>
        <initializer>_suNg_zero(a)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="394" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aa0e169eca7688dc0c0a67ce7d32e79af" prot="public" static="no">
        <name>_suNgc_dagger</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <initializer>_suNg_dagger(u,v)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="396" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a0ef357e1eefbe98546bbb688e1c31714" prot="public" static="no">
        <name>_suNgc_mul</name>
        <param><defname>u</defname></param>
        <param><defname>r</defname></param>
        <param><defname>v</defname></param>
        <initializer>_suNg_mul(u,r,v)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="398" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ab1db3a8b196af2b8c0fbf8adfc4808cd" prot="public" static="no">
        <name>_suNgc_mul_assign</name>
        <param><defname>u</defname></param>
        <param><defname>r</defname></param>
        <initializer>_suNg_mul_assign(u,r)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="400" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ad4d34d3a9cd6ef8c88d51fc90e7d08fa" prot="public" static="no">
        <name>_suNgc_times_suNgc</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <param><defname>w</defname></param>
        <initializer>_suNg_times_suNg(u,v,w)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="402" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a86dbb79899f4c01d8b24604908bdf14f" prot="public" static="no">
        <name>_suNgc_times_suNgc_assign</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <param><defname>w</defname></param>
        <initializer>_suNg_times_suNg_assign(u,v,w)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="404" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a9df699115910964349fcdfc35059ee70" prot="public" static="no">
        <name>_suNgc_trace</name>
        <param><defname>k</defname></param>
        <param><defname>u</defname></param>
        <initializer>_suNg_trace(k,u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="406" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aad92b1a6c024580883b52caaa64be4e8" prot="public" static="no">
        <name>_suNgc_unit</name>
        <param><defname>u</defname></param>
        <initializer>_suNg_unit(u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="408" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a2d0e2de1aadfee842d7dfd8312246d08" prot="public" static="no">
        <name>_suNgc_mul_add</name>
        <param><defname>u</defname></param>
        <param><defname>r</defname></param>
        <param><defname>v</defname></param>
        <param><defname>m</defname></param>
        <param><defname>w</defname></param>
        <initializer>_suNg_mul_add(u,r,v,m,w)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="410" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ab1a64954d4877510e2586d7596418cee" prot="public" static="no">
        <name>_suNgc_add_assign</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <initializer>_suNg_add_assign(u,v)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="412" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a25bd6712f2696e69c5ec12d020fa819f" prot="public" static="no">
        <name>_suNgc_sqnorm</name>
        <param><defname>k</defname></param>
        <param><defname>u</defname></param>
        <initializer>_suNg_sqnorm(k,u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="414" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a7a39c27c0aa91d47d30198c3a9816e9f" prot="public" static="no">
        <name>_suNg_FMAT_zero</name>
        <param><defname>u</defname></param>
        <initializer>    _complex_0((u).c[0]);\
    _complex_0((u).c[1]);\
    _complex_0((u).c[2]);\
    _complex_0((u).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="417" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aab717d3bd15e9e10c186f113c3f638cb" prot="public" static="no">
        <name>_spinor_zero_g</name>
        <param><defname>r</defname></param>
        <initializer>  _vector_zero_g((r).c[0]); \
  _vector_zero_g((r).c[1]); \
  _vector_zero_g((r).c[2]); \
  _vector_zero_g((r).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="432" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a56b8537598e9ec563ca33bed4fe36294" prot="public" static="no">
        <name>_spinor_g5_g</name>
        <param><defname>s</defname></param>
        <param><defname>r</defname></param>
        <initializer>  (s).c[0]=(r).c[0]; \
  (s).c[1]=(r).c[1]; \
  _vector_minus_g((s).c[2],(r).c[2]); \
  _vector_minus_g((s).c[3],(r).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="439" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a2faeb05b5d0ef3f41b33bfe9dfc8d9ad" prot="public" static="no">
        <name>_spinor_g5_assign_g</name>
        <param><defname>r</defname></param>
        <initializer>  _vector_minus_g((r).c[2],(r).c[2]); \
  _vector_minus_g((r).c[3],(r).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="446" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a647fdd1c89bb271ad177cf6ac67b0331" prot="public" static="no">
        <name>_spinor_minus_g</name>
        <param><defname>s</defname></param>
        <param><defname>r</defname></param>
        <initializer>  _vector_minus_g((s).c[0],(r).c[0]); \
  _vector_minus_g((s).c[1],(r).c[1]); \
  _vector_minus_g((s).c[2],(r).c[2]); \
  _vector_minus_g((s).c[3],(r).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="451" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ad086dd987e620d1ed4cb901aa9b8b515" prot="public" static="no">
        <name>_spinor_mul_g</name>
        <param><defname>r</defname></param>
        <param><defname>k</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_mul_g((r).c[0],k,(s).c[0]); \
  _vector_mul_g((r).c[1],k,(s).c[1]); \
  _vector_mul_g((r).c[2],k,(s).c[2]); \
  _vector_mul_g((r).c[3],k,(s).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="458" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a5ff57baab47b82ee4216eac3270c0f1c" prot="public" static="no">
        <name>_spinor_mulc_g</name>
        <param><defname>r</defname></param>
        <param><defname>z</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_mulc_g((r).c[0],z,(s).c[0]); \
  _vector_mulc_g((r).c[1],z,(s).c[1]); \
  _vector_mulc_g((r).c[2],z,(s).c[2]); \
  _vector_mulc_g((r).c[3],z,(s).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="465" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="465" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1afa9951fa1cb735a3130dfb64cb0e774b" prot="public" static="no">
        <name>_spinor_mulc_add_assign_g</name>
        <param><defname>r</defname></param>
        <param><defname>z</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_mulc_add_assign_g((r).c[0],(z),(s).c[0]); \
  _vector_mulc_add_assign_g((r).c[1],(z),(s).c[1]); \
  _vector_mulc_add_assign_g((r).c[2],(z),(s).c[2]); \
  _vector_mulc_add_assign_g((r).c[3],(z),(s).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="472" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aa37e6de5244528bcda1f45902edb9a72" prot="public" static="no">
        <name>_spinor_mul_add_assign_g</name>
        <param><defname>r</defname></param>
        <param><defname>k</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_mul_add_assign_g((r).c[0],(k),(s).c[0]); \
  _vector_mul_add_assign_g((r).c[1],(k),(s).c[1]); \
  _vector_mul_add_assign_g((r).c[2],(k),(s).c[2]); \
  _vector_mul_add_assign_g((r).c[3],(k),(s).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="479" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aabff75afded6c10c8863eb1289f9fcef" prot="public" static="no">
        <name>_spinor_lc_g</name>
        <param><defname>r</defname></param>
        <param><defname>k1</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>k2</defname></param>
        <param><defname>s2</defname></param>
        <initializer>  _vector_lc_g((r).c[0],(k1),(s1).c[0],(k2),(s2).c[0]); \
  _vector_lc_g((r).c[1],(k1),(s1).c[1],(k2),(s2).c[1]); \
  _vector_lc_g((r).c[2],(k1),(s1).c[2],(k2),(s2).c[2]); \
  _vector_lc_g((r).c[3],(k1),(s1).c[3],(k2),(s2).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="486" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="486" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aa826810276066aa0120c5c8623d7c947" prot="public" static="no">
        <name>_spinor_lc_add_assign_g</name>
        <param><defname>r</defname></param>
        <param><defname>k1</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>k2</defname></param>
        <param><defname>s2</defname></param>
        <initializer>  _vector_lc_add_assign_g((r).c[0],(k1),(s1).c[0],(k2),(s2).c[0]); \
  _vector_lc_add_assign_g((r).c[1],(k1),(s1).c[1],(k2),(s2).c[1]); \
  _vector_lc_add_assign_g((r).c[2],(k1),(s1).c[2],(k2),(s2).c[2]); \
  _vector_lc_add_assign_g((r).c[3],(k1),(s1).c[3],(k2),(s2).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="493" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="493" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aaa20ea0fbd3f84dd73d52e3809f4554f" prot="public" static="no">
        <name>_spinor_clc_g</name>
        <param><defname>r</defname></param>
        <param><defname>z1</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>z2</defname></param>
        <param><defname>s2</defname></param>
        <initializer>  _vector_clc_g((r).c[0],(z1),(s1).c[0],(z2),(s2).c[0]); \
  _vector_clc_g((r).c[1],(z1),(s1).c[1],(z2),(s2).c[1]); \
  _vector_clc_g((r).c[2],(z1),(s1).c[2],(z2),(s2).c[2]); \
  _vector_clc_g((r).c[3],(z1),(s1).c[3],(z2),(s2).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="500" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="500" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ac3814d5a251d1a5e910cf31e33cc2274" prot="public" static="no">
        <name>_spinor_clc_add_assign_g</name>
        <param><defname>r</defname></param>
        <param><defname>z1</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>z2</defname></param>
        <param><defname>s2</defname></param>
        <initializer>  _vector_clc_add_assign_g((r).c[0],(z1),(s1).c[0],(z2),(s2).c[0]); \
  _vector_clc_add_assign_g((r).c[1],(z1),(s1).c[1],(z2),(s2).c[1]); \
  _vector_clc_add_assign_g((r).c[2],(z1),(s1).c[2],(z2),(s2).c[2]); \
  _vector_clc_add_assign_g((r).c[3],(z1),(s1).c[3],(z2),(s2).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="507" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="507" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a1f654681030b03c9e60d6c4ab932ea49" prot="public" static="no">
        <name>_spinor_add_g</name>
        <param><defname>r</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>  _vector_add_g((r).c[0],(s1).c[0],(s2).c[0]); \
  _vector_add_g((r).c[1],(s1).c[1],(s2).c[1]); \
  _vector_add_g((r).c[2],(s1).c[2],(s2).c[2]); \
  _vector_add_g((r).c[3],(s1).c[3],(s2).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="514" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="514" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a42a4d74dc3a52e43368d66dcf92c6a77" prot="public" static="no">
        <name>_spinor_sub_g</name>
        <param><defname>r</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>  _vector_sub_g((r).c[0],(s1).c[0],(s2).c[0]); \
  _vector_sub_g((r).c[1],(s1).c[1],(s2).c[1]); \
  _vector_sub_g((r).c[2],(s1).c[2],(s2).c[2]); \
  _vector_sub_g((r).c[3],(s1).c[3],(s2).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="521" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a8e285e5b2ebeaeeb4814e34502072aa6" prot="public" static="no">
        <name>_spinor_add_assign_g</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_add_assign_g((r).c[0],(s).c[0]); \
  _vector_add_assign_g((r).c[1],(s).c[1]); \
  _vector_add_assign_g((r).c[2],(s).c[2]); \
  _vector_add_assign_g((r).c[3],(s).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="528" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a90eee1fdabeb1b0de4656c0ef673888c" prot="public" static="no">
        <name>_spinor_sub_assign_g</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_sub_assign_g((r).c[0],(s).c[0]); \
  _vector_sub_assign_g((r).c[1],(s).c[1]); \
  _vector_sub_assign_g((r).c[2],(s).c[2]); \
  _vector_sub_assign_g((r).c[3],(s).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="535" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="535" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1abb6c43fe232f8415c4dd23ddbb056a95" prot="public" static="no">
        <name>_spinor_i_add_assign_g</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_i_add_assign_g((r).c[0],(s).c[0]); \
  _vector_i_add_assign_g((r).c[1],(s).c[1]); \
  _vector_i_add_assign_g((r).c[2],(s).c[2]); \
  _vector_i_add_assign_g((r).c[3],(s).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="542" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="542" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a68d825bcd4d5556630acf51efb4b18ce" prot="public" static="no">
        <name>_spinor_i_sub_assign_g</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_i_sub_assign_g((r).c[0],(s).c[0]); \
  _vector_i_sub_assign_g((r).c[1],(s).c[1]); \
  _vector_i_sub_assign_g((r).c[2],(s).c[2]); \
  _vector_i_sub_assign_g((r).c[3],(s).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="549" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="549" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a998f02b7188ab92f0823f7bd664ac4fd" prot="public" static="no">
        <name>_spinor_prod_re_g</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   do { \
      _vector_prod_re_g((k),(r).c[0],(s).c[0]);\
      _vector_prod_add_assign_re_g((k),(r).c[1],(s).c[1]); \
      _vector_prod_add_assign_re_g((k),(r).c[2],(s).c[2]); \
      _vector_prod_add_assign_re_g((k),(r).c[3],(s).c[3]); \
   } while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="556" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="556" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a4171b37a58ef747a8137f5ac5ae4bc3a" prot="public" static="no">
        <name>_spinor_prod_im_g</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   do { \
      _vector_prod_im_g((k),(r).c[0],(s).c[0]);\
      _vector_prod_add_assign_im_g((k),(r).c[1],(s).c[1]); \
      _vector_prod_add_assign_im_g((k),(r).c[2],(s).c[2]); \
      _vector_prod_add_assign_im_g((k),(r).c[3],(s).c[3]); \
   } while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="565" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="565" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a0212ada95322dc221652672541e1210d" prot="public" static="no">
        <name>_spinor_prod_g</name>
        <param><defname>z</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   do { \
      _complex_0(z); \
      _vector_prod_assign_g((z),(r).c[0],(s).c[0]); \
      _vector_prod_assign_g((z),(r).c[1],(s).c[1]); \
      _vector_prod_assign_g((z),(r).c[2],(s).c[2]); \
      _vector_prod_assign_g((z),(r).c[3],(s).c[3]); \
   } while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="574" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="574" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a8aa5ae3c57f7726e8c2581777f72fed0" prot="public" static="no">
        <name>_spinor_prod_assign_g</name>
        <param><defname>z</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_prod_assign_g((z),(r).c[0],(s).c[0]); \
  _vector_prod_assign_g((z),(r).c[1],(s).c[1]); \
  _vector_prod_assign_g((z),(r).c[2],(s).c[2]); \
  _vector_prod_assign_g((z),(r).c[3],(s).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="584" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="584" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a1403ac1fdc229e28db98b86c16cb6243" prot="public" static="no">
        <name>_spinor_g5_prod_re_g</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   do { \
      _vector_prod_re_g((k),(r).c[0],(s).c[0]);\
      _vector_prod_add_assign_re_g((k),(r).c[1],(s).c[1]);\
      _vector_prod_sub_assign_re_g((k),(r).c[2],(s).c[2]);\
      _vector_prod_sub_assign_re_g((k),(r).c[3],(s).c[3]);\
   } while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="591" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="591" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a494c4e3266f715337e162359792f83cb" prot="public" static="no">
        <name>_spinor_g5_prod_im_g</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   do { \
      _vector_prod_im_g((k),(r).c[0],(s).c[0]);\
      _vector_prod_add_assign_im_g((k),(r).c[1],(s).c[1]);\
      _vector_prod_sub_assign_im_g((k),(r).c[2],(s).c[2]);\
      _vector_prod_sub_assign_im_g((k),(r).c[3],(s).c[3]);\
   } while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="600" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="600" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ae0e0818a50733f26d99c08b924cd392a" prot="public" static="no">
        <name>_spinor_project_g</name>
        <param><defname>r</defname></param>
        <param><defname>z</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_project_g((r).c[0],z,(s).c[0]); \
  _vector_project_g((r).c[1],z,(s).c[1]); \
  _vector_project_g((r).c[2],z,(s).c[2]); \
  _vector_project_g((r).c[3],z,(s).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="609" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="609" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a2d6912a34f55bc831259fd5e46743c3c" prot="public" static="no">
        <name>_spinor_pminus_g</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_add_g((r).c[0],(s).c[0],(s).c[2]); \
  _vector_add_g((r).c[1],(s).c[1],(s).c[3]); \
  _vector_mul_g((r).c[0],0.5,(r).c[0]); \
  _vector_mul_g((r).c[1],0.5,(r).c[1]); \
  (r).c[2] = (r).c[0]; \
  (r).c[3] = (r).c[1]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="616" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="616" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a4d5dd763824390e4aabcb9eef84a4614" prot="public" static="no">
        <name>_spinor_pplus_g</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_sub_g((r).c[0],(s).c[0],(s).c[2]); \
  _vector_sub_g((r).c[1],(s).c[1],(s).c[3]); \
  _vector_mul_g((r).c[0],0.5,(r).c[0]); \
  _vector_mul_g((r).c[1],0.5,(r).c[1]); \
  _vector_mul_g((r).c[2],-1.,(r).c[0]); \
  _vector_mul_g((r).c[3],-1.,(r).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="625" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="625" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a8957af1737f7f0b890bd74d6bd3fd40b" prot="public" static="no">
        <name>read_gpu_suNg_vector_flt</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>in</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*2)*(stride); \
      (v).c[0]=((<ref refid="dc/d03/structhr__complex__flt" kindref="compound">hr_complex_flt</ref>*)(in))[__iz]; __iz+=(stride); \
      (v).c[1]=((<ref refid="dc/d03/structhr__complex__flt" kindref="compound">hr_complex_flt</ref>*)(in))[__iz]; \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="636" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="636" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a2881ef317df4f4d8028a84cccdbe01a9" prot="public" static="no">
        <name>read_gpu_suNg_vector</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>in</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*2)*(stride); \
      (v).c[0]=((<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>*)(in))[__iz]; __iz+=(stride); \
      (v).c[1]=((<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>*)(in))[__iz]; \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="643" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="643" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ad7427d005802c3532e9615b845bf2443" prot="public" static="no">
        <name>write_gpu_suNg_vector_flt</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>out</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*2)*(stride); \
      ((<ref refid="dc/d03/structhr__complex__flt" kindref="compound">hr_complex_flt</ref>*)(out))[__iz]=(v).c[0]; __iz+=(stride); \
      ((<ref refid="dc/d03/structhr__complex__flt" kindref="compound">hr_complex_flt</ref>*)(out))[__iz]=(v).c[1]; \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="653" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="653" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a080800a1a788c282954a28045ee7b2ce" prot="public" static="no">
        <name>write_gpu_suNg_vector</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>out</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*2)*(stride); \
      ((<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>*)(out))[__iz]=(v).c[0]; __iz+=(stride); \
      ((<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>*)(out))[__iz]=(v).c[1]; \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="660" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="660" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a8116249c8ddb21446be2db82b6224c25" prot="public" static="no">
        <name>_suNg_av_flt_read_gpu</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>in</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*3)*(stride); \
      (v).c[0]=((float*)(in))[__iz]; __iz+=(stride); \
      (v).c[1]=((float*)(in))[__iz]; __iz+=(stride); \
      (v).c[2]=((float*)(in))[__iz]; \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="670" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1adef0625b11483ab748295404caf8c97d" prot="public" static="no">
        <name>_suNg_av_read_gpu</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>in</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*3)*(stride); \
      (v).c[0]=((double*)(in))[__iz]; __iz+=(stride); \
      (v).c[1]=((double*)(in))[__iz]; __iz+=(stride); \
      (v).c[2]=((double*)(in))[__iz]; \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="678" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="678" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a4177b00c96328943556b7b6745b22710" prot="public" static="no">
        <name>_suNg_av_flt_write_gpu</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>out</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*3)*(stride); \
      ((float*)(out))[__iz]=(v).c[0]; __iz+=(stride); \
      ((float*)(out))[__iz]=(v).c[1]; __iz+=(stride); \
      ((float*)(out))[__iz]=(v).c[2]; \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="689" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="689" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a0ba48f27e81cddcde155cdedb84288ae" prot="public" static="no">
        <name>_suNg_av_write_gpu</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>out</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*3)*(stride); \
      ((double*)(out))[__iz]=(v).c[0]; __iz+=(stride); \
      ((double*)(out))[__iz]=(v).c[1]; __iz+=(stride); \
      ((double*)(out))[__iz]=(v).c[2]; \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="697" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="697" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a66c3048149de7c8d34d602eb4ca87fa3" prot="public" static="no">
        <name>_algebra_vector_mul_add_assign_gpu_g_flt</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <param><defname>r</defname></param>
        <param><defname>in</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*3)*(stride); \
      ((float*)(v))[__iz]+=(in).c[0]*(r); __iz+=(stride); \
      ((float*)(v))[__iz]+=(in).c[1]*(r); __iz+=(stride); \
      ((float*)(v))[__iz]+=(in).c[2]*(r); \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="708" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="708" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1acd310c675ca956d190ee40a2add33c14" prot="public" static="no">
        <name>_algebra_vector_mul_add_assign_gpu_g</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <param><defname>r</defname></param>
        <param><defname>in</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*3)*(stride); \
      ((double*)(v))[__iz]+=(in).c[0]*(r); __iz+=(stride); \
      ((double*)(v))[__iz]+=(in).c[1]*(r); __iz+=(stride); \
      ((double*)(v))[__iz]+=(in).c[2]*(r); \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="716" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="716" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a696f12f92b5d2ff4fc7420702081e1db" prot="public" static="no">
        <name>read_gpu_suNg_flt</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>in</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*8)*(stride); \
		 double real_part, imag_part; \
      real_part = ((float*)(in))[__iz]; __iz+=(stride); \
		 imag_part = ((float*)(in))[__iz]; __iz+=(stride); \
		 (v).c[0]=<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>(real_part, imag_part); \
      real_part = ((float*)(in))[__iz]; __iz+=(stride); \
		 imag_part = ((float*)(in))[__iz]; __iz+=(stride); \
		 (v).c[1]=<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>(real_part, imag_part); \
      real_part = ((float*)(in))[__iz]; __iz+=(stride); \
		 imag_part = ((float*)(in))[__iz]; __iz+=(stride); \
		 (v).c[2]=<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>(real_part, imag_part); \
		 real_part = ((float*)(in))[__iz]; __iz+=(stride); \
		 imag_part = ((float*)(in))[__iz]; __iz+=(stride); \
		 (v).c[3]=<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>(real_part, imag_part); \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="727" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="727" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ad00542df47ce4d9641ad9b9200d40951" prot="public" static="no">
        <name>read_gpu_suNg</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>in</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*8)*(stride); \
		 double real_part, imag_part; \
      real_part = ((double*)(in))[__iz]; __iz+=(stride); \
		 imag_part = ((double*)(in))[__iz]; __iz+=(stride); \
		 (v).c[0]=<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>(real_part, imag_part); \
      real_part = ((double*)(in))[__iz]; __iz+=(stride); \
		 imag_part = ((double*)(in))[__iz]; __iz+=(stride); \
		 (v).c[1]=<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>(real_part, imag_part); \
      real_part = ((double*)(in))[__iz]; __iz+=(stride); \
		 imag_part = ((double*)(in))[__iz]; __iz+=(stride); \
		 (v).c[2]=<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>(real_part, imag_part); \
		 real_part = ((double*)(in))[__iz]; __iz+=(stride); \
		 imag_part = ((double*)(in))[__iz]; __iz+=(stride); \
		 (v).c[3]=<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>(real_part, imag_part); \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="745" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="745" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a115bd2e2df5f8eb58b9e8986bace278b" prot="public" static="no">
        <name>write_gpu_suNg_flt</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>out</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*8)*(stride); \
      ((float*)(out))[__iz]=_complex_re((v).c[0]); __iz+=(stride); \
      ((float*)(out))[__iz]=_complex_im((v).c[0]); __iz+=(stride); \
      ((float*)(out))[__iz]=_complex_re((v).c[1]); __iz+=(stride); \
      ((float*)(out))[__iz]=_complex_im((v).c[1]); __iz+=(stride); \
      ((float*)(out))[__iz]=_complex_re((v).c[2]); __iz+=(stride); \
      ((float*)(out))[__iz]=_complex_im((v).c[2]); __iz+=(stride); \
      ((float*)(out))[__iz]=_complex_re((v).c[3]); __iz+=(stride); \
      ((float*)(out))[__iz]=_complex_im((v).c[3]); \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="766" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="766" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a502f50617db83b1dfef439d5c08c8f5b" prot="public" static="no">
        <name>write_gpu_suNg</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>out</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*8)*(stride); \
      ((double*)(out))[__iz]=_complex_re((v).c[0]); __iz+=(stride); \
      ((double*)(out))[__iz]=_complex_im((v).c[0]); __iz+=(stride); \
      ((double*)(out))[__iz]=_complex_re((v).c[1]); __iz+=(stride); \
      ((double*)(out))[__iz]=_complex_im((v).c[1]); __iz+=(stride); \
      ((double*)(out))[__iz]=_complex_re((v).c[2]); __iz+=(stride); \
      ((double*)(out))[__iz]=_complex_im((v).c[2]); __iz+=(stride); \
      ((double*)(out))[__iz]=_complex_re((v).c[3]); __iz+=(stride); \
      ((double*)(out))[__iz]=_complex_im((v).c[3]); \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="779" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="779" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1af9382b166e38a82677a14ecd64675ed0" prot="public" static="no">
        <name>_vector_zero_f</name>
        <param><defname>r</defname></param>
        <initializer>   _complex_0((r).c[0]); \
   _complex_0((r).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="802" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="802" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ae3f77154deeda1e54d1c2fd287d49363" prot="public" static="no">
        <name>_vector_minus_f</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_minus((r).c[0],(s).c[0]); \
   _complex_minus((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="807" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="807" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a0f7d40ce3f2a21b787d2b94159adc3eb" prot="public" static="no">
        <name>_vector_i_plus_f</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_i_plus((r).c[0],(s).c[0]); \
   _complex_i_plus((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="812" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="812" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1af3cc55c575ed9d597b0a0ba46a91b1ed" prot="public" static="no">
        <name>_vector_i_minus_f</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_i_minus((r).c[0],(s).c[0]); \
   _complex_i_minus((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="817" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="817" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a0b3b2563ceb1182146a3ffbc8e3f41a5" prot="public" static="no">
        <name>_vector_mul_f</name>
        <param><defname>r</defname></param>
        <param><defname>k</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_mulr((r).c[0],(k),(s).c[0]); \
   _complex_mulr((r).c[1],(k),(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="822" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="822" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a0e997eb73c3d9e350e477374dcfa3fbe" prot="public" static="no">
        <name>_vector_mulc_f</name>
        <param><defname>r</defname></param>
        <param><defname>z</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_mul((r).c[0],(z),(s).c[0]); \
   _complex_mul((r).c[1],(z),(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="827" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="827" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a1ffd8321bded1f9973505ebaf9dcd5ba" prot="public" static="no">
        <name>_vector_mulc_star_f</name>
        <param><defname>r</defname></param>
        <param><defname>z</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_mul_star((r).c[0],(s).c[0],(z)); \
   _complex_mul_star((r).c[1],(s).c[1],(z))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="832" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="832" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a2e5b4d6cc0cc485a927e46c070cf59d5" prot="public" static="no">
        <name>_vector_add_f</name>
        <param><defname>r</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>   _complex_add((r).c[0],(s1).c[0],(s2).c[0]); \
   _complex_add((r).c[1],(s1).c[1],(s2).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="837" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="837" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aa2d141883467e7b222e96fd19d6cd6ac" prot="public" static="no">
        <name>_vector_sub_f</name>
        <param><defname>r</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>   _complex_sub((r).c[0],(s1).c[0],(s2).c[0]); \
   _complex_sub((r).c[1],(s1).c[1],(s2).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="842" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="842" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a9080d6df2df095672293951a7f6fa590" prot="public" static="no">
        <name>_vector_i_add_f</name>
        <param><defname>r</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>   _complex_i_add((r).c[0],(s1).c[0],(s2).c[0]); \
   _complex_i_add((r).c[1],(s1).c[1],(s2).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="847" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="847" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a8cebbc823aac61700934f8cea7f01ad2" prot="public" static="no">
        <name>_vector_i_sub_f</name>
        <param><defname>r</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>   _complex_i_sub((r).c[0],(s1).c[0],(s2).c[0]); \
   _complex_i_sub((r).c[1],(s1).c[1],(s2).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="852" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="852" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1af84d2e96fb2ca0179b037f6119db1e21" prot="public" static="no">
        <name>_vector_add_assign_f</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_add_assign((r).c[0],(s).c[0]); \
   _complex_add_assign((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="857" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="857" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a4ef27b1e73fd8656d397d6edcd88c08b" prot="public" static="no">
        <name>_vector_sub_assign_f</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_sub_assign((r).c[0],(s).c[0]); \
   _complex_sub_assign((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="862" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="862" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a401fa56c56cf034197bd60c10adf1257" prot="public" static="no">
        <name>_vector_i_add_assign_f</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_i_add_assign((r).c[0],(s).c[0]); \
   _complex_i_add_assign((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="867" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="867" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a4dd2f707f72e4e7587ef99d0686c78ab" prot="public" static="no">
        <name>_vector_i_sub_assign_f</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_i_sub_assign((r).c[0],(s).c[0]); \
   _complex_i_sub_assign((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="872" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="872" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a6a2d9eae80a289d28367710202828469" prot="public" static="no">
        <name>_vector_prod_f</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   (k)=_complex_prod((r).c[0],(s).c[0]);\
   (k)+=_complex_prod((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="877" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="877" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1abe2513527a3b09bbd7ee0a62cdaea33c" prot="public" static="no">
        <name>_vector_prod_re_f</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   (k)=_complex_prod_re((r).c[0],(s).c[0]);\
   (k)+=_complex_prod_re((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="882" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="882" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aba524a71c221d8e0a1bc98b1d7aa79ba" prot="public" static="no">
        <name>_vector_prod_im_f</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   (k)=_complex_prod_im((r).c[0],(s).c[0]);\
   (k)+=_complex_prod_im((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="887" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="887" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1af321bd1d63fd74c9431c6c173380203a" prot="public" static="no">
        <name>_vector_mulc_add_assign_f</name>
        <param><defname>r</defname></param>
        <param><defname>z</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_mul_assign((r).c[0],(z),(s).c[0]); \
   _complex_mul_assign((r).c[1],(z),(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="892" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="892" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a738f65b21f14a44de2b751c8fabc7629" prot="public" static="no">
        <name>_vector_mul_add_assign_f</name>
        <param><defname>r</defname></param>
        <param><defname>k</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_mulr_assign((r).c[0],(k),(s).c[0]); \
   _complex_mulr_assign((r).c[1],(k),(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="897" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="897" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a616cb1a5a49591b3a6f7eea3cb9b2730" prot="public" static="no">
        <name>_vector_lc_f</name>
        <param><defname>r</defname></param>
        <param><defname>k1</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>k2</defname></param>
        <param><defname>s2</defname></param>
        <initializer>   _complex_rlc((r).c[0],(k1),(s1).c[0],(k2),(s2).c[0]); \
   _complex_rlc((r).c[1],(k1),(s1).c[1],(k2),(s2).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="902" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="902" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1abf65b5a1668ffbff5bb56e8a995416b4" prot="public" static="no">
        <name>_vector_lc_add_assign_f</name>
        <param><defname>r</defname></param>
        <param><defname>k1</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>k2</defname></param>
        <param><defname>s2</defname></param>
        <initializer>   _complex_rlc_assign((r).c[0],(k1),(s1).c[0],(k2),(s2).c[0]); \
   _complex_rlc_assign((r).c[1],(k1),(s1).c[1],(k2),(s2).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="907" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="907" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a6eacd771bd97b32bd8c3f161c8abe9f7" prot="public" static="no">
        <name>_vector_clc_f</name>
        <param><defname>r</defname></param>
        <param><defname>z1</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>z2</defname></param>
        <param><defname>s2</defname></param>
        <initializer>   _complex_clc((r).c[0],(z1),(s1).c[0],(z2),(s2).c[0]); \
   _complex_clc((r).c[1],(z1),(s1).c[1],(z2),(s2).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="912" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="912" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aee7220bda8282fabc67e78ad6baf40e0" prot="public" static="no">
        <name>_vector_clc_add_assign_f</name>
        <param><defname>r</defname></param>
        <param><defname>z1</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>z2</defname></param>
        <param><defname>s2</defname></param>
        <initializer>   _complex_clc_assign((r).c[0],(z1),(s1).c[0],(z2),(s2).c[0]); \
   _complex_clc_assign((r).c[1],(z1),(s1).c[1],(z2),(s2).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="917" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="917" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ad06d5848125a276255c6af220d43953c" prot="public" static="no">
        <name>_vector_prod_assign_f</name>
        <param><defname>z</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_prod_assign((z),(r).c[0],(s).c[0]); \
   _complex_prod_assign((z),(r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="922" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="922" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a0b6325c0a24fca8e05f09ac46f82b3a9" prot="public" static="no">
        <name>_vector_prod_add_assign_re_f</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   (k)+=_complex_prod_re((r).c[0],(s).c[0]);\
   (k)+=_complex_prod_re((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="927" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="927" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aaa55d74d32ccd94133f342277911aa70" prot="public" static="no">
        <name>_vector_prod_add_assign_im_f</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   (k)+=_complex_prod_im((r).c[0],(s).c[0]);\
   (k)+=_complex_prod_im((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="932" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="932" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a6a45adeaa683230b9877956aa8975edd" prot="public" static="no">
        <name>_vector_prod_sub_assign_re_f</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   (k)-=_complex_prod_re((r).c[0],(s).c[0]);\
   (k)-=_complex_prod_re((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="937" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="937" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a78c5e17908a8e1934d43f2576ddd5fad" prot="public" static="no">
        <name>_vector_prod_sub_assign_im_f</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   (k)-=_complex_prod_im((r).c[0],(s).c[0]);\
   (k)-=_complex_prod_im((r).c[1],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="942" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="942" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1af0219e6457bc2dfea91e0b17cffb25bf" prot="public" static="no">
        <name>_vector_project_f</name>
        <param><defname>r</defname></param>
        <param><defname>z</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_mul_sub_assign((r).c[0],(z),(s).c[0]); \
   _complex_mul_sub_assign((r).c[1],(z),(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="947" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="947" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a204b6f63fbc78eca11aeeea36e2ca052" prot="public" static="no">
        <name>_suNf_dagger</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <initializer>   _complex_star((u).c[0],(v).c[0]); \
   _complex_star((u).c[1],(v).c[2]); \
   _complex_star((u).c[2],(v).c[1]); \
   _complex_star((u).c[3],(v).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="960" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="960" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a005923d6cbd867f10d407a27ecd18ebb" prot="public" static="no">
        <name>_suNf_times_suNf</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <param><defname>w</defname></param>
        <initializer>      _complex_mul((u).c[0],(v).c[0],(w).c[0]);\
      _complex_mul_assign((u).c[0],(v).c[1],(w).c[2]); \
      _complex_mul((u).c[1],(v).c[0],(w).c[1]);\
      _complex_mul_assign((u).c[1],(v).c[1],(w).c[3]); \
      _complex_mul((u).c[2],(v).c[2],(w).c[0]);\
      _complex_mul_assign((u).c[2],(v).c[3],(w).c[2]); \
      _complex_mul((u).c[3],(v).c[2],(w).c[1]);\
      _complex_mul_assign((u).c[3],(v).c[3],(w).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="967" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="967" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a602181b8148e74baa9d997d114981acf" prot="public" static="no">
        <name>_suNf_times_suNf_assign</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <param><defname>w</defname></param>
        <initializer>      _complex_mul_assign((u).c[0],(v).c[0],(w).c[0]);\
      _complex_mul_assign((u).c[0],(v).c[1],(w).c[2]); \
      _complex_mul_assign((u).c[1],(v).c[0],(w).c[1]);\
      _complex_mul_assign((u).c[1],(v).c[1],(w).c[3]); \
      _complex_mul_assign((u).c[2],(v).c[2],(w).c[0]);\
      _complex_mul_assign((u).c[2],(v).c[3],(w).c[2]); \
      _complex_mul_assign((u).c[3],(v).c[2],(w).c[1]);\
      _complex_mul_assign((u).c[3],(v).c[3],(w).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="978" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="978" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a108975bb8bb334cb0922c20822b129ac" prot="public" static="no">
        <name>_suNf_times_suNf_dagger</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <param><defname>w</defname></param>
        <initializer>      _complex_mul_star((u).c[0],(v).c[0],(w).c[0]);\
      _complex_mul_star_assign((u).c[0],(v).c[1],(w).c[1]); \
      _complex_mul_star((u).c[1],(v).c[0],(w).c[2]);\
      _complex_mul_star_assign((u).c[1],(v).c[1],(w).c[3]); \
      _complex_mul_star((u).c[2],(v).c[2],(w).c[0]);\
      _complex_mul_star_assign((u).c[2],(v).c[3],(w).c[1]); \
      _complex_mul_star((u).c[3],(v).c[2],(w).c[2]);\
      _complex_mul_star_assign((u).c[3],(v).c[3],(w).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="989" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="989" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1af290c0b76d0a88544d35dec59e1583ae" prot="public" static="no">
        <name>_suNf_dagger_times_suNf</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <param><defname>w</defname></param>
        <initializer>      _complex_mul_star((u).c[0],(w).c[0],(v).c[0]);\
      _complex_mul_star_assign((u).c[0],(w).c[2],(v).c[2]); \
      _complex_mul_star((u).c[1],(w).c[1],(v).c[0]);\
      _complex_mul_star_assign((u).c[1],(w).c[3],(v).c[2]); \
      _complex_mul_star((u).c[2],(w).c[0],(v).c[1]);\
      _complex_mul_star_assign((u).c[2],(w).c[2],(v).c[3]); \
      _complex_mul_star((u).c[3],(w).c[1],(v).c[1]);\
      _complex_mul_star_assign((u).c[3],(w).c[3],(v).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1000" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1000" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a96bd90462386bfb3db530c69ef72d8ba" prot="public" static="no">
        <name>_suNf_unit</name>
        <param><defname>u</defname></param>
        <initializer>   _complex_1((u).c[0]);\
   _complex_0((u).c[1]);\
   _complex_0((u).c[2]);\
   _complex_1((u).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1011" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1011" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a3cae27fe89505e9625a99be28a661a6f" prot="public" static="no">
        <name>_suNf_minus</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <initializer>   _complex_minus((u).c[0],(v).c[0]);\
   _complex_minus((u).c[1],(v).c[1]);\
   _complex_minus((u).c[2],(v).c[2]);\
   _complex_minus((u).c[3],(v).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1018" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1018" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ad087827ffd0c22b09d45dc399b411586" prot="public" static="no">
        <name>_suNf_mul</name>
        <param><defname>u</defname></param>
        <param><defname>r</defname></param>
        <param><defname>v</defname></param>
        <initializer>   _complex_mulr((u).c[0],(r),(v).c[0]);\
   _complex_mulr((u).c[1],(r),(v).c[1]);\
   _complex_mulr((u).c[2],(r),(v).c[2]);\
   _complex_mulr((u).c[3],(r),(v).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1025" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1025" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aecca4560a862641a43cca743f3d16063" prot="public" static="no">
        <name>_suNf_mul_assign</name>
        <param><defname>u</defname></param>
        <param><defname>r</defname></param>
        <initializer>   (u).c[0]*=(r);\
   (u).c[1]*=(r);\
   (u).c[2]*=(r);\
   (u).c[3]*=(r)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1032" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1032" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ab00af963c6a740beaef977b67d9a0b25" prot="public" static="no">
        <name>_suNf_mulc</name>
        <param><defname>u</defname></param>
        <param><defname>r</defname></param>
        <param><defname>v</defname></param>
        <initializer>   _complex_mul((u).c[0],(r),(v).c[0]);\
   _complex_mul((u).c[1],(r),(v).c[1]);\
   _complex_mul((u).c[2],(r),(v).c[2]);\
   _complex_mul((u).c[3],(r),(v).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1039" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1039" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a72991e6d75fd560d5db3bd1018fd96fb" prot="public" static="no">
        <name>_suNf_mul_add</name>
        <param><defname>u</defname></param>
        <param><defname>r</defname></param>
        <param><defname>v</defname></param>
        <param><defname>m</defname></param>
        <param><defname>w</defname></param>
        <initializer>   (u).c[0]=(r)*(v).c[0]+(m)*(w).c[0];\
   (u).c[1]=(r)*(v).c[1]+(m)*(w).c[1];\
   (u).c[2]=(r)*(v).c[2]+(m)*(w).c[2];\
   (u).c[3]=(r)*(v).c[3]+(m)*(w).c[3]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1046" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1046" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a076456d532caf4d11f977dd90113ee0c" prot="public" static="no">
        <name>_suNf_add_assign</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <initializer>   _complex_add_assign((u).c[0],(v).c[0]);\
   _complex_add_assign((u).c[1],(v).c[1]);\
   _complex_add_assign((u).c[2],(v).c[2]);\
   _complex_add_assign((u).c[3],(v).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1053" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1053" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a470fe7b65e80f7fa1a6ac01685fc133e" prot="public" static="no">
        <name>_suNf_sub_assign</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <initializer>   _complex_sub_assign((u).c[0],(v).c[0]);\
   _complex_sub_assign((u).c[1],(v).c[1]);\
   _complex_sub_assign((u).c[2],(v).c[2]);\
   _complex_sub_assign((u).c[3],(v).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1060" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1060" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a5277e3761cccbd177dedf31033734799" prot="public" static="no">
        <name>_suNf_sqnorm</name>
        <param><defname>k</defname></param>
        <param><defname>u</defname></param>
        <initializer>   (k)=0.;\
   (k)+=_complex_prod_re((u).c[0],(u).c[0]); \
   (k)+=_complex_prod_re((u).c[1],(u).c[1]); \
   (k)+=_complex_prod_re((u).c[2],(u).c[2]); \
   (k)+=_complex_prod_re((u).c[3],(u).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1067" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1067" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a51457fb9b106680e2cbd3951ef39492f" prot="public" static="no">
        <name>_suNf_sqnorm_m1</name>
        <param><defname>k</defname></param>
        <param><defname>u</defname></param>
        <initializer>   (k)=\
    +_complex_prod_m1_re((u).c[0],(u).c[0])\
    +_complex_prod_re((u).c[1],(u).c[1])\
    +_complex_prod_re((u).c[2],(u).c[2])\
    +_complex_prod_m1_re((u).c[3],(u).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1075" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1075" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a4ba464ba8d8afa55fcaa3b0413fb799b" prot="public" static="no">
        <name>_suNf_trace</name>
        <param><defname>k</defname></param>
        <param><defname>u</defname></param>
        <initializer>   (k)=((u).c[0])+ \
       ((u).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1083" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1083" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a364dbfac12b63c210b83889bf77e5591" prot="public" static="no">
        <name>_suNf_trace_re</name>
        <param><defname>k</defname></param>
        <param><defname>u</defname></param>
        <initializer>   (k)=_complex_re((u).c[0])+ \
       _complex_re((u).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1088" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1088" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ac3341282b7ef28b4c69aea5cc600dba9" prot="public" static="no">
        <name>_suNf_trace_im</name>
        <param><defname>k</defname></param>
        <param><defname>u</defname></param>
        <initializer>   (k)=_complex_im((u).c[0])+ \
       _complex_im((u).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1093" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1093" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a910e2becd0bac055962874084313ec1b" prot="public" static="no">
        <name>_suNf_FMAT</name>
        <param><defname>u</defname></param>
        <param><defname>s</defname></param>
        <initializer>   _complex_mul_star_assign((u).c[0],(s).c[0].c[0],(s).c[2].c[0]); \
   _complex_mul_star_assign((u).c[0],(s).c[1].c[0],(s).c[3].c[0]);\
   _complex_mul_star_assign((u).c[1],(s).c[0].c[0],(s).c[2].c[1]); \
   _complex_mul_star_assign((u).c[1],(s).c[1].c[0],(s).c[3].c[1]);\
   _complex_mul_star_assign((u).c[2],(s).c[0].c[1],(s).c[2].c[0]); \
   _complex_mul_star_assign((u).c[2],(s).c[1].c[1],(s).c[3].c[0]);\
   _complex_mul_star_assign((u).c[3],(s).c[0].c[1],(s).c[2].c[1]); \
   _complex_mul_star_assign((u).c[3],(s).c[1].c[1],(s).c[3].c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1099" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1099" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a482d79612f98a2627e8823d5412d0bf4" prot="public" static="no">
        <name>_suNf_multiply</name>
        <param><defname>r</defname></param>
        <param><defname>u</defname></param>
        <param><defname>s</defname></param>
        <initializer>      _complex_mul((r).c[0],(u).c[0],(s).c[0]);\
      _complex_mul_assign((r).c[0],(u).c[1],(s).c[1]); \
      _complex_mul((r).c[1],(u).c[2],(s).c[0]);\
      _complex_mul_assign((r).c[1],(u).c[3],(s).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1111" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a6da228f04b44618940c676e129efa0bc" prot="public" static="no">
        <name>_suNf_inverse_multiply</name>
        <param><defname>r</defname></param>
        <param><defname>u</defname></param>
        <param><defname>s</defname></param>
        <initializer>      _complex_mul_star((r).c[0],(s).c[0],(u).c[0]);\
      _complex_mul_star_assign((r).c[0],(s).c[1],(u).c[2]); \
      _complex_mul_star((r).c[1],(s).c[0],(u).c[1]);\
      _complex_mul_star_assign((r).c[1],(s).c[1],(u).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1119" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a82023802b255607328dc02430a91d614" prot="public" static="no">
        <name>_suNf_zero</name>
        <param><defname>u</defname></param>
        <initializer>    _complex_0((u).c[0]);\
    _complex_0((u).c[1]);\
    _complex_0((u).c[2]);\
    _complex_0((u).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1126" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ae81bf337950f1e031b3c4a3df60f71ea" prot="public" static="no">
        <name>_suNfc_multiply</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <initializer>_suNf_multiply(a,b,c)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1132" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a2de2e6e63abf730f37746581db411e33" prot="public" static="no">
        <name>_suNfc_inverse_multiply</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <initializer>_suNf_inverse_multiply(a,b,c)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1134" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a48078773c350b6663a771c68f695cf65" prot="public" static="no">
        <name>_suNfc_zero</name>
        <param><defname>a</defname></param>
        <initializer>_suNf_zero(a)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1136" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a8209f17cec9f3b121a831e6e1b76beec" prot="public" static="no">
        <name>_suNfc_dagger</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <initializer>_suNf_dagger(u,v)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1138" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a1b22c3da1f6440e4a52487d40308efd0" prot="public" static="no">
        <name>_suNfc_mul</name>
        <param><defname>u</defname></param>
        <param><defname>r</defname></param>
        <param><defname>v</defname></param>
        <initializer>_suNf_mul(u,r,v)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1140" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ac7f11b0b43320b924aef3f3b266b51a1" prot="public" static="no">
        <name>_suNfc_mul_assign</name>
        <param><defname>u</defname></param>
        <param><defname>r</defname></param>
        <initializer>_suNf_mul_assign(u,r)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1142" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a1bb581aa344f10ddfc4f14152d622d45" prot="public" static="no">
        <name>_suNfc_times_suNfc</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <param><defname>w</defname></param>
        <initializer>_suNf_times_suNf(u,v,w)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1144" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a5059512ecf14fe1f766298804ee1a973" prot="public" static="no">
        <name>_suNfc_times_suNfc_assign</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <param><defname>w</defname></param>
        <initializer>_suNf_times_suNf_assign(u,v,w)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1146" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aef5cf0347c4ad729d12dba82daa357e7" prot="public" static="no">
        <name>_suNfc_trace</name>
        <param><defname>k</defname></param>
        <param><defname>u</defname></param>
        <initializer>_suNf_trace(k,u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1148" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a606278aa5df8cc96b15a3139bab14967" prot="public" static="no">
        <name>_suNfc_unit</name>
        <param><defname>u</defname></param>
        <initializer>_suNf_unit(u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1150" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aa1bf7d1942e1b1f6ecd7c6effa9c2eb9" prot="public" static="no">
        <name>_suNfc_mul_add</name>
        <param><defname>u</defname></param>
        <param><defname>r</defname></param>
        <param><defname>v</defname></param>
        <param><defname>m</defname></param>
        <param><defname>w</defname></param>
        <initializer>_suNf_mul_add(u,r,v,m,w)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1152" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a711f34bf8867aeb9250d8cec073b02a0" prot="public" static="no">
        <name>_suNfc_add_assign</name>
        <param><defname>u</defname></param>
        <param><defname>v</defname></param>
        <initializer>_suNf_add_assign(u,v)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1154" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a06e1e9d638bcbd384399d79741094533" prot="public" static="no">
        <name>_suNfc_sqnorm</name>
        <param><defname>k</defname></param>
        <param><defname>u</defname></param>
        <initializer>_suNf_sqnorm(k,u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1156" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ad368e3363900459ccccf7d717f2cd796" prot="public" static="no">
        <name>_suNf_FMAT_zero</name>
        <param><defname>u</defname></param>
        <initializer>    _complex_0((u).c[0]);\
    _complex_0((u).c[1]);\
    _complex_0((u).c[2]);\
    _complex_0((u).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1159" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a98a912cb9d4cb2a3b38a6456297ac897" prot="public" static="no">
        <name>_spinor_zero_f</name>
        <param><defname>r</defname></param>
        <initializer>  _vector_zero_f((r).c[0]); \
  _vector_zero_f((r).c[1]); \
  _vector_zero_f((r).c[2]); \
  _vector_zero_f((r).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1174" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a5928c0f3f68a2c77170081bb5c36cc2a" prot="public" static="no">
        <name>_spinor_g5_f</name>
        <param><defname>s</defname></param>
        <param><defname>r</defname></param>
        <initializer>  (s).c[0]=(r).c[0]; \
  (s).c[1]=(r).c[1]; \
  _vector_minus_f((s).c[2],(r).c[2]); \
  _vector_minus_f((s).c[3],(r).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1181" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ab2392bfa60ed385d36e7433eaa865278" prot="public" static="no">
        <name>_spinor_g5_assign_f</name>
        <param><defname>r</defname></param>
        <initializer>  _vector_minus_f((r).c[2],(r).c[2]); \
  _vector_minus_f((r).c[3],(r).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1188" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ac5e65afb47d8f8ca9765c1bfadfc57bc" prot="public" static="no">
        <name>_spinor_minus_f</name>
        <param><defname>s</defname></param>
        <param><defname>r</defname></param>
        <initializer>  _vector_minus_f((s).c[0],(r).c[0]); \
  _vector_minus_f((s).c[1],(r).c[1]); \
  _vector_minus_f((s).c[2],(r).c[2]); \
  _vector_minus_f((s).c[3],(r).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1193" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ae6f59ee6f32a1532c00ad32ab030f933" prot="public" static="no">
        <name>_spinor_mul_f</name>
        <param><defname>r</defname></param>
        <param><defname>k</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_mul_f((r).c[0],k,(s).c[0]); \
  _vector_mul_f((r).c[1],k,(s).c[1]); \
  _vector_mul_f((r).c[2],k,(s).c[2]); \
  _vector_mul_f((r).c[3],k,(s).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1200" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a40dfeae1f4d6a57ebf78ae0329dc5923" prot="public" static="no">
        <name>_spinor_mulc_f</name>
        <param><defname>r</defname></param>
        <param><defname>z</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_mulc_f((r).c[0],z,(s).c[0]); \
  _vector_mulc_f((r).c[1],z,(s).c[1]); \
  _vector_mulc_f((r).c[2],z,(s).c[2]); \
  _vector_mulc_f((r).c[3],z,(s).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1207" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ab6196934a461be36980ebaf343d0f91f" prot="public" static="no">
        <name>_spinor_mulc_add_assign_f</name>
        <param><defname>r</defname></param>
        <param><defname>z</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_mulc_add_assign_f((r).c[0],(z),(s).c[0]); \
  _vector_mulc_add_assign_f((r).c[1],(z),(s).c[1]); \
  _vector_mulc_add_assign_f((r).c[2],(z),(s).c[2]); \
  _vector_mulc_add_assign_f((r).c[3],(z),(s).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1214" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a46d9589b748db8a333db7cd69a675d2a" prot="public" static="no">
        <name>_spinor_mul_add_assign_f</name>
        <param><defname>r</defname></param>
        <param><defname>k</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_mul_add_assign_f((r).c[0],(k),(s).c[0]); \
  _vector_mul_add_assign_f((r).c[1],(k),(s).c[1]); \
  _vector_mul_add_assign_f((r).c[2],(k),(s).c[2]); \
  _vector_mul_add_assign_f((r).c[3],(k),(s).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1221" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a39449207897bb317f8bfb7c7b56ce8f5" prot="public" static="no">
        <name>_spinor_lc_f</name>
        <param><defname>r</defname></param>
        <param><defname>k1</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>k2</defname></param>
        <param><defname>s2</defname></param>
        <initializer>  _vector_lc_f((r).c[0],(k1),(s1).c[0],(k2),(s2).c[0]); \
  _vector_lc_f((r).c[1],(k1),(s1).c[1],(k2),(s2).c[1]); \
  _vector_lc_f((r).c[2],(k1),(s1).c[2],(k2),(s2).c[2]); \
  _vector_lc_f((r).c[3],(k1),(s1).c[3],(k2),(s2).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1228" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a29d79d5e036a7c29fb1a59ac07592ff7" prot="public" static="no">
        <name>_spinor_lc_add_assign_f</name>
        <param><defname>r</defname></param>
        <param><defname>k1</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>k2</defname></param>
        <param><defname>s2</defname></param>
        <initializer>  _vector_lc_add_assign_f((r).c[0],(k1),(s1).c[0],(k2),(s2).c[0]); \
  _vector_lc_add_assign_f((r).c[1],(k1),(s1).c[1],(k2),(s2).c[1]); \
  _vector_lc_add_assign_f((r).c[2],(k1),(s1).c[2],(k2),(s2).c[2]); \
  _vector_lc_add_assign_f((r).c[3],(k1),(s1).c[3],(k2),(s2).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1235" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a6e0ceb19393594c7318c8004a336ec59" prot="public" static="no">
        <name>_spinor_clc_f</name>
        <param><defname>r</defname></param>
        <param><defname>z1</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>z2</defname></param>
        <param><defname>s2</defname></param>
        <initializer>  _vector_clc_f((r).c[0],(z1),(s1).c[0],(z2),(s2).c[0]); \
  _vector_clc_f((r).c[1],(z1),(s1).c[1],(z2),(s2).c[1]); \
  _vector_clc_f((r).c[2],(z1),(s1).c[2],(z2),(s2).c[2]); \
  _vector_clc_f((r).c[3],(z1),(s1).c[3],(z2),(s2).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1242" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a2cf21f47f58df5ee6ce94077258bb35a" prot="public" static="no">
        <name>_spinor_clc_add_assign_f</name>
        <param><defname>r</defname></param>
        <param><defname>z1</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>z2</defname></param>
        <param><defname>s2</defname></param>
        <initializer>  _vector_clc_add_assign_f((r).c[0],(z1),(s1).c[0],(z2),(s2).c[0]); \
  _vector_clc_add_assign_f((r).c[1],(z1),(s1).c[1],(z2),(s2).c[1]); \
  _vector_clc_add_assign_f((r).c[2],(z1),(s1).c[2],(z2),(s2).c[2]); \
  _vector_clc_add_assign_f((r).c[3],(z1),(s1).c[3],(z2),(s2).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1249" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aae0f36044f64e7944599ee6cc737df31" prot="public" static="no">
        <name>_spinor_add_f</name>
        <param><defname>r</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>  _vector_add_f((r).c[0],(s1).c[0],(s2).c[0]); \
  _vector_add_f((r).c[1],(s1).c[1],(s2).c[1]); \
  _vector_add_f((r).c[2],(s1).c[2],(s2).c[2]); \
  _vector_add_f((r).c[3],(s1).c[3],(s2).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1256" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a4bd9c95bfa62f8ce91416e2deab85c86" prot="public" static="no">
        <name>_spinor_sub_f</name>
        <param><defname>r</defname></param>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>  _vector_sub_f((r).c[0],(s1).c[0],(s2).c[0]); \
  _vector_sub_f((r).c[1],(s1).c[1],(s2).c[1]); \
  _vector_sub_f((r).c[2],(s1).c[2],(s2).c[2]); \
  _vector_sub_f((r).c[3],(s1).c[3],(s2).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1263" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a41b144fb5e2dc69d6521675718bb57bb" prot="public" static="no">
        <name>_spinor_add_assign_f</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_add_assign_f((r).c[0],(s).c[0]); \
  _vector_add_assign_f((r).c[1],(s).c[1]); \
  _vector_add_assign_f((r).c[2],(s).c[2]); \
  _vector_add_assign_f((r).c[3],(s).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1270" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1adaa108095e303a56719da185371ebdc4" prot="public" static="no">
        <name>_spinor_sub_assign_f</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_sub_assign_f((r).c[0],(s).c[0]); \
  _vector_sub_assign_f((r).c[1],(s).c[1]); \
  _vector_sub_assign_f((r).c[2],(s).c[2]); \
  _vector_sub_assign_f((r).c[3],(s).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1277" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aa2da5ab348088b4168786d247446ddf5" prot="public" static="no">
        <name>_spinor_i_add_assign_f</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_i_add_assign_f((r).c[0],(s).c[0]); \
  _vector_i_add_assign_f((r).c[1],(s).c[1]); \
  _vector_i_add_assign_f((r).c[2],(s).c[2]); \
  _vector_i_add_assign_f((r).c[3],(s).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1284" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a062c280a78cb0e7b01cdb5df5557e917" prot="public" static="no">
        <name>_spinor_i_sub_assign_f</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_i_sub_assign_f((r).c[0],(s).c[0]); \
  _vector_i_sub_assign_f((r).c[1],(s).c[1]); \
  _vector_i_sub_assign_f((r).c[2],(s).c[2]); \
  _vector_i_sub_assign_f((r).c[3],(s).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1291" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a88cf575d5d3a64a86f6bcc2e35932cce" prot="public" static="no">
        <name>_spinor_prod_re_f</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   do { \
      _vector_prod_re_f((k),(r).c[0],(s).c[0]);\
      _vector_prod_add_assign_re_f((k),(r).c[1],(s).c[1]); \
      _vector_prod_add_assign_re_f((k),(r).c[2],(s).c[2]); \
      _vector_prod_add_assign_re_f((k),(r).c[3],(s).c[3]); \
   } while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1298" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ab44dd79dad5ff3e483079151f8ae26f5" prot="public" static="no">
        <name>_spinor_prod_im_f</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   do { \
      _vector_prod_im_f((k),(r).c[0],(s).c[0]);\
      _vector_prod_add_assign_im_f((k),(r).c[1],(s).c[1]); \
      _vector_prod_add_assign_im_f((k),(r).c[2],(s).c[2]); \
      _vector_prod_add_assign_im_f((k),(r).c[3],(s).c[3]); \
   } while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1307" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ad8decaf9a7e76bde5b3425b31345e69d" prot="public" static="no">
        <name>_spinor_prod_f</name>
        <param><defname>z</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   do { \
      _complex_0(z); \
      _vector_prod_assign_f((z),(r).c[0],(s).c[0]); \
      _vector_prod_assign_f((z),(r).c[1],(s).c[1]); \
      _vector_prod_assign_f((z),(r).c[2],(s).c[2]); \
      _vector_prod_assign_f((z),(r).c[3],(s).c[3]); \
   } while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1316" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1af11c19a1941ee3f282fc8551b2782f2f" prot="public" static="no">
        <name>_spinor_prod_assign_f</name>
        <param><defname>z</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_prod_assign_f((z),(r).c[0],(s).c[0]); \
  _vector_prod_assign_f((z),(r).c[1],(s).c[1]); \
  _vector_prod_assign_f((z),(r).c[2],(s).c[2]); \
  _vector_prod_assign_f((z),(r).c[3],(s).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1326" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ac7d47be6946651aa7371c771bba137c4" prot="public" static="no">
        <name>_spinor_g5_prod_re_f</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   do { \
      _vector_prod_re_f((k),(r).c[0],(s).c[0]);\
      _vector_prod_add_assign_re_f((k),(r).c[1],(s).c[1]);\
      _vector_prod_sub_assign_re_f((k),(r).c[2],(s).c[2]);\
      _vector_prod_sub_assign_re_f((k),(r).c[3],(s).c[3]);\
   } while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1333" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a7e42cbcdb7ed695a77f61ef5d47e4398" prot="public" static="no">
        <name>_spinor_g5_prod_im_f</name>
        <param><defname>k</defname></param>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>   do { \
      _vector_prod_im_f((k),(r).c[0],(s).c[0]);\
      _vector_prod_add_assign_im_f((k),(r).c[1],(s).c[1]);\
      _vector_prod_sub_assign_im_f((k),(r).c[2],(s).c[2]);\
      _vector_prod_sub_assign_im_f((k),(r).c[3],(s).c[3]);\
   } while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1342" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1342" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a3b413a703ad829478079bc7517c26896" prot="public" static="no">
        <name>_spinor_project_f</name>
        <param><defname>r</defname></param>
        <param><defname>z</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_project_f((r).c[0],z,(s).c[0]); \
  _vector_project_f((r).c[1],z,(s).c[1]); \
  _vector_project_f((r).c[2],z,(s).c[2]); \
  _vector_project_f((r).c[3],z,(s).c[3])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1351" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a7ee65e8eb07a94eeb4bd14cca668fabc" prot="public" static="no">
        <name>_spinor_pminus_f</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_add_f((r).c[0],(s).c[0],(s).c[2]); \
  _vector_add_f((r).c[1],(s).c[1],(s).c[3]); \
  _vector_mul_f((r).c[0],0.5,(r).c[0]); \
  _vector_mul_f((r).c[1],0.5,(r).c[1]); \
  (r).c[2] = (r).c[0]; \
  (r).c[3] = (r).c[1]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1358" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a593811e4ab21de36f16cf0a8343a08be" prot="public" static="no">
        <name>_spinor_pplus_f</name>
        <param><defname>r</defname></param>
        <param><defname>s</defname></param>
        <initializer>  _vector_sub_f((r).c[0],(s).c[0],(s).c[2]); \
  _vector_sub_f((r).c[1],(s).c[1],(s).c[3]); \
  _vector_mul_f((r).c[0],0.5,(r).c[0]); \
  _vector_mul_f((r).c[1],0.5,(r).c[1]); \
  _vector_mul_f((r).c[2],-1.,(r).c[0]); \
  _vector_mul_f((r).c[3],-1.,(r).c[1])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1367" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ac4a6ccbebd7799217088457c15e1bde1" prot="public" static="no">
        <name>read_gpu_suNf_vector_flt</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>in</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*2)*(stride); \
      (v).c[0]=((<ref refid="dc/d03/structhr__complex__flt" kindref="compound">hr_complex_flt</ref>*)(in))[__iz]; __iz+=(stride); \
      (v).c[1]=((<ref refid="dc/d03/structhr__complex__flt" kindref="compound">hr_complex_flt</ref>*)(in))[__iz]; \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1378" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a6d0ebb715a81cde3f9a2da896b925c1e" prot="public" static="no">
        <name>read_gpu_suNf_vector</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>in</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*2)*(stride); \
      (v).c[0]=((<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>*)(in))[__iz]; __iz+=(stride); \
      (v).c[1]=((<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>*)(in))[__iz]; \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1385" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a5c0e4eceb6e61c17bc7ea71ba910bdd3" prot="public" static="no">
        <name>write_gpu_suNf_vector_flt</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>out</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*2)*(stride); \
      ((<ref refid="dc/d03/structhr__complex__flt" kindref="compound">hr_complex_flt</ref>*)(out))[__iz]=(v).c[0]; __iz+=(stride); \
      ((<ref refid="dc/d03/structhr__complex__flt" kindref="compound">hr_complex_flt</ref>*)(out))[__iz]=(v).c[1]; \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1395" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a577f39aa8b5d2fb7af3416bc131aee80" prot="public" static="no">
        <name>write_gpu_suNf_vector</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>out</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*2)*(stride); \
      ((<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>*)(out))[__iz]=(v).c[0]; __iz+=(stride); \
      ((<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>*)(out))[__iz]=(v).c[1]; \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1402" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aed4ee9e13c74bb4d742ca5b6271d7211" prot="public" static="no">
        <name>_suNf_av_flt_read_gpu</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>in</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*3)*(stride); \
      (v).c[0]=((float*)(in))[__iz]; __iz+=(stride); \
      (v).c[1]=((float*)(in))[__iz]; __iz+=(stride); \
      (v).c[2]=((float*)(in))[__iz]; \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1412" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a2628828949517ccbbf8aaa935e2596fb" prot="public" static="no">
        <name>_suNf_av_read_gpu</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>in</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*3)*(stride); \
      (v).c[0]=((double*)(in))[__iz]; __iz+=(stride); \
      (v).c[1]=((double*)(in))[__iz]; __iz+=(stride); \
      (v).c[2]=((double*)(in))[__iz]; \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1420" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a4310530474c0ab811796c5396f1a2c61" prot="public" static="no">
        <name>_suNf_av_flt_write_gpu</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>out</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*3)*(stride); \
      ((float*)(out))[__iz]=(v).c[0]; __iz+=(stride); \
      ((float*)(out))[__iz]=(v).c[1]; __iz+=(stride); \
      ((float*)(out))[__iz]=(v).c[2]; \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1431" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ac1eee88d603e0e4048f0827b57d697b3" prot="public" static="no">
        <name>_suNf_av_write_gpu</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>out</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*3)*(stride); \
      ((double*)(out))[__iz]=(v).c[0]; __iz+=(stride); \
      ((double*)(out))[__iz]=(v).c[1]; __iz+=(stride); \
      ((double*)(out))[__iz]=(v).c[2]; \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1439" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a606bb27ce70e42a234554edfd0c1dca8" prot="public" static="no">
        <name>_algebra_vector_mul_add_assign_gpu_f_flt</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <param><defname>r</defname></param>
        <param><defname>in</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*3)*(stride); \
      ((float*)(v))[__iz]+=(in).c[0]*(r); __iz+=(stride); \
      ((float*)(v))[__iz]+=(in).c[1]*(r); __iz+=(stride); \
      ((float*)(v))[__iz]+=(in).c[2]*(r); \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1450" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a08c7214046fb1897291cb77674f75b6f" prot="public" static="no">
        <name>_algebra_vector_mul_add_assign_gpu_f</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <param><defname>r</defname></param>
        <param><defname>in</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*3)*(stride); \
      ((double*)(v))[__iz]+=(in).c[0]*(r); __iz+=(stride); \
      ((double*)(v))[__iz]+=(in).c[1]*(r); __iz+=(stride); \
      ((double*)(v))[__iz]+=(in).c[2]*(r); \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1458" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1ac36b77ea68fec21fab5058f544f2506f" prot="public" static="no">
        <name>read_gpu_suNf_flt</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>in</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*8)*(stride); \
		 double real_part, imag_part; \
      real_part = ((float*)(in))[__iz]; __iz+=(stride); \
		 imag_part = ((float*)(in))[__iz]; __iz+=(stride); \
		 (v).c[0]=<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>(real_part, imag_part); \
      real_part = ((float*)(in))[__iz]; __iz+=(stride); \
		 imag_part = ((float*)(in))[__iz]; __iz+=(stride); \
		 (v).c[1]=<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>(real_part, imag_part); \
      real_part = ((float*)(in))[__iz]; __iz+=(stride); \
		 imag_part = ((float*)(in))[__iz]; __iz+=(stride); \
		 (v).c[2]=<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>(real_part, imag_part); \
		 real_part = ((float*)(in))[__iz]; __iz+=(stride); \
		 imag_part = ((float*)(in))[__iz]; __iz+=(stride); \
		 (v).c[3]=<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>(real_part, imag_part); \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1469" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a59add38c7e21365f60c04856447d4345" prot="public" static="no">
        <name>read_gpu_suNf</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>in</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*8)*(stride); \
		 double real_part, imag_part; \
      real_part = ((double*)(in))[__iz]; __iz+=(stride); \
		 imag_part = ((double*)(in))[__iz]; __iz+=(stride); \
		 (v).c[0]=<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>(real_part, imag_part); \
      real_part = ((double*)(in))[__iz]; __iz+=(stride); \
		 imag_part = ((double*)(in))[__iz]; __iz+=(stride); \
		 (v).c[1]=<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>(real_part, imag_part); \
      real_part = ((double*)(in))[__iz]; __iz+=(stride); \
		 imag_part = ((double*)(in))[__iz]; __iz+=(stride); \
		 (v).c[2]=<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>(real_part, imag_part); \
		 real_part = ((double*)(in))[__iz]; __iz+=(stride); \
		 imag_part = ((double*)(in))[__iz]; __iz+=(stride); \
		 (v).c[3]=<ref refid="d7/de2/structhr__complex" kindref="compound">hr_complex</ref>(real_part, imag_part); \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1487" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1a5100a6b45accdeb735e8e7e011ce4966" prot="public" static="no">
        <name>write_gpu_suNf_flt</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>out</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*8)*(stride); \
      ((float*)(out))[__iz]=_complex_re((v).c[0]); __iz+=(stride); \
      ((float*)(out))[__iz]=_complex_im((v).c[0]); __iz+=(stride); \
      ((float*)(out))[__iz]=_complex_re((v).c[1]); __iz+=(stride); \
      ((float*)(out))[__iz]=_complex_im((v).c[1]); __iz+=(stride); \
      ((float*)(out))[__iz]=_complex_re((v).c[2]); __iz+=(stride); \
      ((float*)(out))[__iz]=_complex_im((v).c[2]); __iz+=(stride); \
      ((float*)(out))[__iz]=_complex_re((v).c[3]); __iz+=(stride); \
      ((float*)(out))[__iz]=_complex_im((v).c[3]); \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1508" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="d1/d36/suN_8h_1aa7a003d4b45838ebd7681604a1458819" prot="public" static="no">
        <name>write_gpu_suNf</name>
        <param><defname>stride</defname></param>
        <param><defname>v</defname></param>
        <param><defname>out</defname></param>
        <param><defname>iy</defname></param>
        <param><defname>x</defname></param>
        <initializer>   do {  \
      int __iz=(iy)+((x)*8)*(stride); \
      ((double*)(out))[__iz]=_complex_re((v).c[0]); __iz+=(stride); \
      ((double*)(out))[__iz]=_complex_im((v).c[0]); __iz+=(stride); \
      ((double*)(out))[__iz]=_complex_re((v).c[1]); __iz+=(stride); \
      ((double*)(out))[__iz]=_complex_im((v).c[1]); __iz+=(stride); \
      ((double*)(out))[__iz]=_complex_re((v).c[2]); __iz+=(stride); \
      ((double*)(out))[__iz]=_complex_im((v).c[2]); __iz+=(stride); \
      ((double*)(out))[__iz]=_complex_re((v).c[3]); __iz+=(stride); \
      ((double*)(out))[__iz]=_complex_im((v).c[3]); \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" line="1521" column="9" bodyfile="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h" bodystart="1521" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*<sp/>File<sp/>suN.h</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/>Type<sp/>definitions<sp/>and<sp/>macros<sp/>for<sp/>SU(N)<sp/>matrices<sp/>and<sp/>spinors</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SUN_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SUN_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;suN_types.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*</highlight></codeline>
<codeline lineno="16"><highlight class="comment">*<sp/>The<sp/>following<sp/>macros<sp/>are<sp/>the<sp/>same<sp/>for<sp/>single<sp/>and<sp/>double<sp/>precision<sp/>types</highlight></codeline>
<codeline lineno="17"><highlight class="comment">*</highlight></codeline>
<codeline lineno="18"><highlight class="comment">*<sp/>Depending<sp/>on<sp/>the<sp/>macro,<sp/>arguments<sp/>are<sp/>variables<sp/>of<sp/>type<sp/>suN_vector<sp/>and<sp/>suN</highlight></codeline>
<codeline lineno="19"><highlight class="comment">*<sp/>(or<sp/>suN_vector_flt<sp/>and<sp/>suN_flt)</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_zero_g(r)<sp/>\</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_0((r).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_0((r).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=-s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_minus_g(r,s)<sp/>\</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_minus((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_minus((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=<sp/>i*s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_i_plus_g(r,s)<sp/>\</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_plus((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_plus((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=-i*s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_i_minus_g(r,s)<sp/>\</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_minus((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_minus((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=k*s<sp/>(k<sp/>real)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_mul_g(r,k,s)<sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mulr((r).c[0],(k),(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mulr((r).c[1],(k),(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=z*s<sp/>(z<sp/>complex)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_mulc_g(r,z,s)<sp/>\</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul((r).c[0],(z),(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul((r).c[1],(z),(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=(z^+)*s<sp/>(z<sp/>complex)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_mulc_star_g(r,z,s)<sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_star((r).c[0],(s).c[0],(z));<sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_star((r).c[1],(s).c[1],(z))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=s1+s2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_add_g(r,s1,s2)<sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_add((r).c[0],(s1).c[0],(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_add((r).c[1],(s1).c[1],(s2).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=s1-s2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_sub_g(r,s1,s2)<sp/>\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_sub((r).c[0],(s1).c[0],(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_sub((r).c[1],(s1).c[1],(s2).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=s1+i*s2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_i_add_g(r,s1,s2)<sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_add((r).c[0],(s1).c[0],(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_add((r).c[1],(s1).c[1],(s2).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=s1-i*s2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_i_sub_g(r,s1,s2)<sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_sub((r).c[0],(s1).c[0],(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_sub((r).c[1],(s1).c[1],(s2).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r+=s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_add_assign_g(r,s)<sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_add_assign((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_add_assign((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r-=s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_sub_assign_g(r,s)<sp/>\</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_sub_assign((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_sub_assign((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r+=i*s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_i_add_assign_g(r,s)<sp/>\</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_add_assign((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_add_assign((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r-=i*s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_i_sub_assign_g(r,s)<sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_sub_assign((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_sub_assign((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=r^*s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_prod_g(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"><sp/><sp/><sp/>(k)=_complex_prod((r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=Re(r^*s)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_prod_re_g(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/><sp/>(k)=_complex_prod_re((r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod_re((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=Im(r*s)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_prod_im_g(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"><sp/><sp/><sp/>(k)=_complex_prod_im((r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod_im((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r+=z*s<sp/>(z<sp/>complex)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_mulc_add_assign_g(r,z,s)<sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_assign((r).c[0],(z),(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_assign((r).c[1],(z),(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r+=k*s<sp/>(k<sp/>real)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_mul_add_assign_g(r,k,s)<sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mulr_assign((r).c[0],(k),(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mulr_assign((r).c[1],(k),(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=k1*s1+k2*s2<sp/>(k1,k2<sp/>real,<sp/>s1,s2<sp/>vectors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_lc_g(r,k1,s1,k2,s2)<sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_rlc((r).c[0],(k1),(s1).c[0],(k2),(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_rlc((r).c[1],(k1),(s1).c[1],(k2),(s2).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r+=k1*s1+k2*s2<sp/>(k1,k2<sp/>real,<sp/>s1,s2<sp/>vectors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_lc_add_assign_g(r,k1,s1,k2,s2)<sp/>\</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_rlc_assign((r).c[0],(k1),(s1).c[0],(k2),(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_rlc_assign((r).c[1],(k1),(s1).c[1],(k2),(s2).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=z1*s1+z2*s2<sp/>(z1,z2<sp/>complex,<sp/>s1,s2<sp/>vectors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_clc_g(r,z1,s1,z2,s2)<sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_clc((r).c[0],(z1),(s1).c[0],(z2),(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_clc((r).c[1],(z1),(s1).c[1],(z2),(s2).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=z1*s1+z2*s2<sp/>(z1,z2<sp/>complex,<sp/>s1,s2<sp/>vectors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_clc_add_assign_g(r,z1,s1,z2,s2)<sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_clc_assign((r).c[0],(z1),(s1).c[0],(z2),(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_clc_assign((r).c[1],(z1),(s1).c[1],(z2),(s2).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>z+=r^*s<sp/>(c<sp/>complex)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_prod_assign_g(z,r,s)<sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_prod_assign((z),(r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_prod_assign((z),(r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k+=Re(r^*s)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_prod_add_assign_re_g(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod_re((r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod_re((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k+=Im(r*s)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_prod_add_assign_im_g(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod_im((r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod_im((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k-=Re(r^*s)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_prod_sub_assign_re_g(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"><sp/><sp/><sp/>(k)-=_complex_prod_re((r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"><sp/><sp/><sp/>(k)-=_complex_prod_re((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k-=Im(r*s)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_prod_sub_assign_im_g(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"><sp/><sp/><sp/>(k)-=_complex_prod_im((r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"><sp/><sp/><sp/>(k)-=_complex_prod_im((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r-=z*s<sp/>(z<sp/>complex)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_project_g(r,z,s)<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_sub_assign((r).c[0],(z),(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_sub_assign((r).c[1],(z),(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r+=s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_algebra_vector_add_assign_g(r,s)<sp/>\</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(r).c[0]+=(s).c[0];<sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(r).c[1]+=(s).c[1];<sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(r).c[2]+=(s).c[2]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r-=s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_algebra_vector_sub_assign_g(r,s)<sp/>\</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(r).c[0]-=(s).c[0];<sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(r).c[1]-=(s).c[1];<sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(r).c[2]-=(s).c[2]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r+=k*s<sp/>(k<sp/>real)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_algebra_vector_mul_add_assign_g(r,k,s)<sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(r).c[0]+=(k)*(s).c[0];<sp/>\</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(r).c[1]+=(k)*(s).c[1];<sp/>\</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(r).c[2]+=(k)*(s).c[2]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=k*s<sp/>(k<sp/>real)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_algebra_vector_mul_g(r,k,s)<sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(r).c[0]=(k)*(s).c[0];<sp/>\</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(r).c[1]=(k)*(s).c[1];<sp/>\</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(r).c[2]=(k)*(s).c[2]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=0<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_algebra_vector_zero_g(r)<sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(r).c[0]=0.;<sp/>\</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(r).c[1]=0.;<sp/>\</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(r).c[2]=0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=|v|^2<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_algebra_vector_sqnorm_g(k,r)<sp/>\</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"><sp/><sp/><sp/>(k)=((r).c[0]*(r).c[0])+<sp/>\</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((r).c[1]*(r).c[1])+<sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((r).c[2]*(r).c[2])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="210"><highlight class="comment">*</highlight></codeline>
<codeline lineno="211"><highlight class="comment">*<sp/>Macros<sp/>for<sp/>SU(N)<sp/>matrices</highlight></codeline>
<codeline lineno="212"><highlight class="comment">*</highlight></codeline>
<codeline lineno="213"><highlight class="comment">*<sp/>Arguments<sp/>are<sp/>variables<sp/>of<sp/>type<sp/>suN</highlight></codeline>
<codeline lineno="214"><highlight class="comment">*</highlight></codeline>
<codeline lineno="215"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=v^dagger<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_dagger(u,v)<sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_star((u).c[0],(v).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_star((u).c[1],(v).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_star((u).c[2],(v).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_star((u).c[3],(v).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=v*w<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_times_suNg(u,v,w)<sp/>\</highlight></codeline>
<codeline lineno="226"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul((u).c[0],(v).c[0],(w).c[0]);\</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[0],(v).c[1],(w).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul((u).c[1],(v).c[0],(w).c[1]);\</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[1],(v).c[1],(w).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul((u).c[2],(v).c[2],(w).c[0]);\</highlight></codeline>
<codeline lineno="231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[2],(v).c[3],(w).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul((u).c[3],(v).c[2],(w).c[1]);\</highlight></codeline>
<codeline lineno="233"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[3],(v).c[3],(w).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u+=v*w<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_times_suNg_assign(u,v,w)<sp/>\</highlight></codeline>
<codeline lineno="237"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[0],(v).c[0],(w).c[0]);\</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[0],(v).c[1],(w).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="239"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[1],(v).c[0],(w).c[1]);\</highlight></codeline>
<codeline lineno="240"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[1],(v).c[1],(w).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="241"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[2],(v).c[2],(w).c[0]);\</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[2],(v).c[3],(w).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="243"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[3],(v).c[2],(w).c[1]);\</highlight></codeline>
<codeline lineno="244"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[3],(v).c[3],(w).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=v*w^+<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_times_suNg_dagger(u,v,w)<sp/>\</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star((u).c[0],(v).c[0],(w).c[0]);\</highlight></codeline>
<codeline lineno="249"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star_assign((u).c[0],(v).c[1],(w).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star((u).c[1],(v).c[0],(w).c[2]);\</highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star_assign((u).c[1],(v).c[1],(w).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="252"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star((u).c[2],(v).c[2],(w).c[0]);\</highlight></codeline>
<codeline lineno="253"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star_assign((u).c[2],(v).c[3],(w).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star((u).c[3],(v).c[2],(w).c[2]);\</highlight></codeline>
<codeline lineno="255"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star_assign((u).c[3],(v).c[3],(w).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=v^+*w<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_dagger_times_suNg(u,v,w)<sp/>\</highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star((u).c[0],(w).c[0],(v).c[0]);\</highlight></codeline>
<codeline lineno="260"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star_assign((u).c[0],(w).c[2],(v).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="261"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star((u).c[1],(w).c[1],(v).c[0]);\</highlight></codeline>
<codeline lineno="262"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star_assign((u).c[1],(w).c[3],(v).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="263"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star((u).c[2],(w).c[0],(v).c[1]);\</highlight></codeline>
<codeline lineno="264"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star_assign((u).c[2],(w).c[2],(v).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star((u).c[3],(w).c[1],(v).c[1]);\</highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star_assign((u).c[3],(w).c[3],(v).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_unit(u)<sp/>\</highlight></codeline>
<codeline lineno="270"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_1((u).c[0]);\</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_0((u).c[1]);\</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_0((u).c[2]);\</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_1((u).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=-v<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_minus(u,v)<sp/>\</highlight></codeline>
<codeline lineno="277"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_minus((u).c[0],(v).c[0]);\</highlight></codeline>
<codeline lineno="278"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_minus((u).c[1],(v).c[1]);\</highlight></codeline>
<codeline lineno="279"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_minus((u).c[2],(v).c[2]);\</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_minus((u).c[3],(v).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=r*v<sp/>(u,v<sp/>mat,<sp/>r<sp/>real)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_mul(u,r,v)<sp/>\</highlight></codeline>
<codeline lineno="284"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mulr((u).c[0],(r),(v).c[0]);\</highlight></codeline>
<codeline lineno="285"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mulr((u).c[1],(r),(v).c[1]);\</highlight></codeline>
<codeline lineno="286"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mulr((u).c[2],(r),(v).c[2]);\</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mulr((u).c[3],(r),(v).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u*=r<sp/>(u<sp/>mat,<sp/>r<sp/>real)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_mul_assign(u,r)<sp/>\</highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor"><sp/><sp/><sp/>(u).c[0]*=(r);\</highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"><sp/><sp/><sp/>(u).c[1]*=(r);\</highlight></codeline>
<codeline lineno="293"><highlight class="preprocessor"><sp/><sp/><sp/>(u).c[2]*=(r);\</highlight></codeline>
<codeline lineno="294"><highlight class="preprocessor"><sp/><sp/><sp/>(u).c[3]*=(r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=r*v<sp/>(u,v<sp/>mat,<sp/>r<sp/>complex)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_mulc(u,r,v)<sp/>\</highlight></codeline>
<codeline lineno="298"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul((u).c[0],(r),(v).c[0]);\</highlight></codeline>
<codeline lineno="299"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul((u).c[1],(r),(v).c[1]);\</highlight></codeline>
<codeline lineno="300"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul((u).c[2],(r),(v).c[2]);\</highlight></codeline>
<codeline lineno="301"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul((u).c[3],(r),(v).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=r*v+m*w<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_mul_add(u,r,v,m,w)<sp/>\</highlight></codeline>
<codeline lineno="305"><highlight class="preprocessor"><sp/><sp/><sp/>(u).c[0]=(r)*(v).c[0]+(m)*(w).c[0];\</highlight></codeline>
<codeline lineno="306"><highlight class="preprocessor"><sp/><sp/><sp/>(u).c[1]=(r)*(v).c[1]+(m)*(w).c[1];\</highlight></codeline>
<codeline lineno="307"><highlight class="preprocessor"><sp/><sp/><sp/>(u).c[2]=(r)*(v).c[2]+(m)*(w).c[2];\</highlight></codeline>
<codeline lineno="308"><highlight class="preprocessor"><sp/><sp/><sp/>(u).c[3]=(r)*(v).c[3]+(m)*(w).c[3]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u+=v<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_add_assign(u,v)<sp/>\</highlight></codeline>
<codeline lineno="312"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_add_assign((u).c[0],(v).c[0]);\</highlight></codeline>
<codeline lineno="313"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_add_assign((u).c[1],(v).c[1]);\</highlight></codeline>
<codeline lineno="314"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_add_assign((u).c[2],(v).c[2]);\</highlight></codeline>
<codeline lineno="315"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_add_assign((u).c[3],(v).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u-=v<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_sub_assign(u,v)<sp/>\</highlight></codeline>
<codeline lineno="319"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_sub_assign((u).c[0],(v).c[0]);\</highlight></codeline>
<codeline lineno="320"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_sub_assign((u).c[1],(v).c[1]);\</highlight></codeline>
<codeline lineno="321"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_sub_assign((u).c[2],(v).c[2]);\</highlight></codeline>
<codeline lineno="322"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_sub_assign((u).c[3],(v).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=|<sp/>u<sp/>|2<sp/>)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_sqnorm(k,u)<sp/>\</highlight></codeline>
<codeline lineno="326"><highlight class="preprocessor"><sp/><sp/><sp/>(k)=0.;\</highlight></codeline>
<codeline lineno="327"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod_re((u).c[0],(u).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="328"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod_re((u).c[1],(u).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="329"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod_re((u).c[2],(u).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="330"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod_re((u).c[3],(u).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=|<sp/>1<sp/>-<sp/>u<sp/>|2<sp/>)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_sqnorm_m1(k,u)<sp/>\</highlight></codeline>
<codeline lineno="334"><highlight class="preprocessor"><sp/><sp/><sp/>(k)=\</highlight></codeline>
<codeline lineno="335"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>+_complex_prod_m1_re((u).c[0],(u).c[0])\</highlight></codeline>
<codeline lineno="336"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>+_complex_prod_re((u).c[1],(u).c[1])\</highlight></codeline>
<codeline lineno="337"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>+_complex_prod_re((u).c[2],(u).c[2])\</highlight></codeline>
<codeline lineno="338"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>+_complex_prod_m1_re((u).c[3],(u).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=<sp/>Tr<sp/>(u)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_trace(k,u)<sp/>\</highlight></codeline>
<codeline lineno="342"><highlight class="preprocessor"><sp/><sp/><sp/>(k)=((u).c[0])+<sp/>\</highlight></codeline>
<codeline lineno="343"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((u).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=Re<sp/>Tr<sp/>(u)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_trace_re(k,u)<sp/>\</highlight></codeline>
<codeline lineno="347"><highlight class="preprocessor"><sp/><sp/><sp/>(k)=_complex_re((u).c[0])+<sp/>\</highlight></codeline>
<codeline lineno="348"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_complex_re((u).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=Im<sp/>Tr<sp/>(u)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_trace_im(k,u)<sp/>\</highlight></codeline>
<codeline lineno="352"><highlight class="preprocessor"><sp/><sp/><sp/>(k)=_complex_im((u).c[0])+<sp/>\</highlight></codeline>
<codeline lineno="353"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_complex_im((u).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>fuction<sp/>compute<sp/>the<sp/>hmc<sp/>force<sp/>matrix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>this<sp/>fuction<sp/>accumulates<sp/>on<sp/>the<sp/>original<sp/>matrix<sp/>u<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_FMAT(u,s)<sp/>\</highlight></codeline>
<codeline lineno="358"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_star_assign((u).c[0],(s).c[0].c[0],(s).c[2].c[0]);<sp/>\</highlight></codeline>
<codeline lineno="359"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_star_assign((u).c[0],(s).c[1].c[0],(s).c[3].c[0]);\</highlight></codeline>
<codeline lineno="360"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_star_assign((u).c[1],(s).c[0].c[0],(s).c[2].c[1]);<sp/>\</highlight></codeline>
<codeline lineno="361"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_star_assign((u).c[1],(s).c[1].c[0],(s).c[3].c[1]);\</highlight></codeline>
<codeline lineno="362"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_star_assign((u).c[2],(s).c[0].c[1],(s).c[2].c[0]);<sp/>\</highlight></codeline>
<codeline lineno="363"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_star_assign((u).c[2],(s).c[1].c[1],(s).c[3].c[0]);\</highlight></codeline>
<codeline lineno="364"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_star_assign((u).c[3],(s).c[0].c[1],(s).c[2].c[1]);<sp/>\</highlight></codeline>
<codeline lineno="365"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_star_assign((u).c[3],(s).c[1].c[1],(s).c[3].c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SU(N)<sp/>matrix<sp/>u<sp/>times<sp/>SU(N)<sp/>vector<sp/>s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=u*s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_multiply(r,u,s)<sp/>\</highlight></codeline>
<codeline lineno="370"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul((r).c[0],(u).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="371"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((r).c[0],(u).c[1],(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="372"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul((r).c[1],(u).c[2],(s).c[0]);\</highlight></codeline>
<codeline lineno="373"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((r).c[1],(u).c[3],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SU(N)<sp/>matrix<sp/>u^dagger<sp/>times<sp/>SU(N)<sp/>vector<sp/>s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=(u^dagger)*s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_inverse_multiply(r,u,s)<sp/>\</highlight></codeline>
<codeline lineno="378"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star((r).c[0],(s).c[0],(u).c[0]);\</highlight></codeline>
<codeline lineno="379"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star_assign((r).c[0],(s).c[1],(u).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="380"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star((r).c[1],(s).c[0],(u).c[1]);\</highlight></codeline>
<codeline lineno="381"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star_assign((r).c[1],(s).c[1],(u).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_zero(u)<sp/>\</highlight></codeline>
<codeline lineno="385"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_complex_0((u).c[0]);\</highlight></codeline>
<codeline lineno="386"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_complex_0((u).c[1]);\</highlight></codeline>
<codeline lineno="387"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_complex_0((u).c[2]);\</highlight></codeline>
<codeline lineno="388"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_complex_0((u).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNgc_multiply(a,b,c)<sp/>_suNg_multiply(a,b,c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNgc_inverse_multiply(a,b,c)<sp/>_suNg_inverse_multiply(a,b,c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNgc_zero(a)<sp/>_suNg_zero(a)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNgc_dagger(u,v)<sp/>_suNg_dagger(u,v)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNgc_mul(u,r,v)<sp/>_suNg_mul(u,r,v)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNgc_mul_assign(u,r)<sp/>_suNg_mul_assign(u,r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNgc_times_suNgc(u,v,w)<sp/>_suNg_times_suNg(u,v,w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNgc_times_suNgc_assign(u,v,w)<sp/>_suNg_times_suNg_assign(u,v,w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNgc_trace(k,u)<sp/>_suNg_trace(k,u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNgc_unit(u)<sp/>_suNg_unit(u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNgc_mul_add(u,r,v,m,w)<sp/>_suNg_mul_add(u,r,v,m,w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNgc_add_assign(u,v)<sp/>_suNg_add_assign(u,v)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNgc_sqnorm(k,u)<sp/>_suNg_sqnorm(k,u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_FMAT_zero(u)<sp/>\</highlight></codeline>
<codeline lineno="418"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_complex_0((u).c[0]);\</highlight></codeline>
<codeline lineno="419"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_complex_0((u).c[1]);\</highlight></codeline>
<codeline lineno="420"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_complex_0((u).c[2]);\</highlight></codeline>
<codeline lineno="421"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_complex_0((u).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="424"><highlight class="comment">*</highlight></codeline>
<codeline lineno="425"><highlight class="comment">*<sp/>Macros<sp/>for<sp/>spinors</highlight></codeline>
<codeline lineno="426"><highlight class="comment">*</highlight></codeline>
<codeline lineno="427"><highlight class="comment">*<sp/>Arguments<sp/>are<sp/>variables<sp/>of<sp/>type<sp/>spinors</highlight></codeline>
<codeline lineno="428"><highlight class="comment">*</highlight></codeline>
<codeline lineno="429"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r=0<sp/><sp/>(r<sp/>spinor)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_zero_g(r)<sp/>\</highlight></codeline>
<codeline lineno="433"><highlight class="preprocessor"><sp/><sp/>_vector_zero_g((r).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="434"><highlight class="preprocessor"><sp/><sp/>_vector_zero_g((r).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="435"><highlight class="preprocessor"><sp/><sp/>_vector_zero_g((r).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="436"><highlight class="preprocessor"><sp/><sp/>_vector_zero_g((r).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>s=g5*r<sp/>(r,s<sp/>spinors,<sp/>g5<sp/>matrix)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_g5_g(s,r)<sp/>\</highlight></codeline>
<codeline lineno="440"><highlight class="preprocessor"><sp/><sp/>(s).c[0]=(r).c[0];<sp/>\</highlight></codeline>
<codeline lineno="441"><highlight class="preprocessor"><sp/><sp/>(s).c[1]=(r).c[1];<sp/>\</highlight></codeline>
<codeline lineno="442"><highlight class="preprocessor"><sp/><sp/>_vector_minus_g((s).c[2],(r).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="443"><highlight class="preprocessor"><sp/><sp/>_vector_minus_g((s).c[3],(r).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r=g5*r<sp/>(r,s<sp/>spinors,<sp/>g5<sp/>matrix)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_g5_assign_g(r)<sp/>\</highlight></codeline>
<codeline lineno="447"><highlight class="preprocessor"><sp/><sp/>_vector_minus_g((r).c[2],(r).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="448"><highlight class="preprocessor"><sp/><sp/>_vector_minus_g((r).c[3],(r).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>s=-r<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_minus_g(s,r)<sp/>\</highlight></codeline>
<codeline lineno="452"><highlight class="preprocessor"><sp/><sp/>_vector_minus_g((s).c[0],(r).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="453"><highlight class="preprocessor"><sp/><sp/>_vector_minus_g((s).c[1],(r).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="454"><highlight class="preprocessor"><sp/><sp/>_vector_minus_g((s).c[2],(r).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="455"><highlight class="preprocessor"><sp/><sp/>_vector_minus_g((s).c[3],(r).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r=k*s<sp/>(k<sp/>real;<sp/>r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_mul_g(r,k,s)<sp/>\</highlight></codeline>
<codeline lineno="459"><highlight class="preprocessor"><sp/><sp/>_vector_mul_g((r).c[0],k,(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="460"><highlight class="preprocessor"><sp/><sp/>_vector_mul_g((r).c[1],k,(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="461"><highlight class="preprocessor"><sp/><sp/>_vector_mul_g((r).c[2],k,(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="462"><highlight class="preprocessor"><sp/><sp/>_vector_mul_g((r).c[3],k,(s).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r=z*s<sp/>(z<sp/>complex;<sp/>r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_mulc_g(r,z,s)<sp/>\</highlight></codeline>
<codeline lineno="466"><highlight class="preprocessor"><sp/><sp/>_vector_mulc_g((r).c[0],z,(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="467"><highlight class="preprocessor"><sp/><sp/>_vector_mulc_g((r).c[1],z,(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="468"><highlight class="preprocessor"><sp/><sp/>_vector_mulc_g((r).c[2],z,(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="469"><highlight class="preprocessor"><sp/><sp/>_vector_mulc_g((r).c[3],z,(s).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r+=z*s<sp/>(z<sp/>complex;<sp/>r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_mulc_add_assign_g(r,z,s)<sp/>\</highlight></codeline>
<codeline lineno="473"><highlight class="preprocessor"><sp/><sp/>_vector_mulc_add_assign_g((r).c[0],(z),(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="474"><highlight class="preprocessor"><sp/><sp/>_vector_mulc_add_assign_g((r).c[1],(z),(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="475"><highlight class="preprocessor"><sp/><sp/>_vector_mulc_add_assign_g((r).c[2],(z),(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="476"><highlight class="preprocessor"><sp/><sp/>_vector_mulc_add_assign_g((r).c[3],(z),(s).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r+=k*s<sp/>(k<sp/>real;<sp/>r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_mul_add_assign_g(r,k,s)<sp/>\</highlight></codeline>
<codeline lineno="480"><highlight class="preprocessor"><sp/><sp/>_vector_mul_add_assign_g((r).c[0],(k),(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="481"><highlight class="preprocessor"><sp/><sp/>_vector_mul_add_assign_g((r).c[1],(k),(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="482"><highlight class="preprocessor"><sp/><sp/>_vector_mul_add_assign_g((r).c[2],(k),(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="483"><highlight class="preprocessor"><sp/><sp/>_vector_mul_add_assign_g((r).c[3],(k),(s).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r=k1*s1+k2*s2<sp/>(k1,k2<sp/>real;<sp/>r,s1,s2<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_lc_g(r,k1,s1,k2,s2)<sp/>\</highlight></codeline>
<codeline lineno="487"><highlight class="preprocessor"><sp/><sp/>_vector_lc_g((r).c[0],(k1),(s1).c[0],(k2),(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="488"><highlight class="preprocessor"><sp/><sp/>_vector_lc_g((r).c[1],(k1),(s1).c[1],(k2),(s2).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="489"><highlight class="preprocessor"><sp/><sp/>_vector_lc_g((r).c[2],(k1),(s1).c[2],(k2),(s2).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="490"><highlight class="preprocessor"><sp/><sp/>_vector_lc_g((r).c[3],(k1),(s1).c[3],(k2),(s2).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r+=k1*s1+k2*s2<sp/>(k1,k2<sp/>real;<sp/>r,s1,s2<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_lc_add_assign_g(r,k1,s1,k2,s2)<sp/>\</highlight></codeline>
<codeline lineno="494"><highlight class="preprocessor"><sp/><sp/>_vector_lc_add_assign_g((r).c[0],(k1),(s1).c[0],(k2),(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="495"><highlight class="preprocessor"><sp/><sp/>_vector_lc_add_assign_g((r).c[1],(k1),(s1).c[1],(k2),(s2).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="496"><highlight class="preprocessor"><sp/><sp/>_vector_lc_add_assign_g((r).c[2],(k1),(s1).c[2],(k2),(s2).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="497"><highlight class="preprocessor"><sp/><sp/>_vector_lc_add_assign_g((r).c[3],(k1),(s1).c[3],(k2),(s2).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r=z1*s1+z2*s2<sp/>(z1,z2<sp/>complex;<sp/>r,s1,s2<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_clc_g(r,z1,s1,z2,s2)<sp/>\</highlight></codeline>
<codeline lineno="501"><highlight class="preprocessor"><sp/><sp/>_vector_clc_g((r).c[0],(z1),(s1).c[0],(z2),(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="502"><highlight class="preprocessor"><sp/><sp/>_vector_clc_g((r).c[1],(z1),(s1).c[1],(z2),(s2).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="503"><highlight class="preprocessor"><sp/><sp/>_vector_clc_g((r).c[2],(z1),(s1).c[2],(z2),(s2).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="504"><highlight class="preprocessor"><sp/><sp/>_vector_clc_g((r).c[3],(z1),(s1).c[3],(z2),(s2).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r+=z1*s1+z2*s2<sp/>(z1,z2<sp/>complex;<sp/>r,s1,s2<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_clc_add_assign_g(r,z1,s1,z2,s2)<sp/>\</highlight></codeline>
<codeline lineno="508"><highlight class="preprocessor"><sp/><sp/>_vector_clc_add_assign_g((r).c[0],(z1),(s1).c[0],(z2),(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="509"><highlight class="preprocessor"><sp/><sp/>_vector_clc_add_assign_g((r).c[1],(z1),(s1).c[1],(z2),(s2).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="510"><highlight class="preprocessor"><sp/><sp/>_vector_clc_add_assign_g((r).c[2],(z1),(s1).c[2],(z2),(s2).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="511"><highlight class="preprocessor"><sp/><sp/>_vector_clc_add_assign_g((r).c[3],(z1),(s1).c[3],(z2),(s2).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r=s1+s2<sp/>(r,s1,s2<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_add_g(r,s1,s2)<sp/>\</highlight></codeline>
<codeline lineno="515"><highlight class="preprocessor"><sp/><sp/>_vector_add_g((r).c[0],(s1).c[0],(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="516"><highlight class="preprocessor"><sp/><sp/>_vector_add_g((r).c[1],(s1).c[1],(s2).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="517"><highlight class="preprocessor"><sp/><sp/>_vector_add_g((r).c[2],(s1).c[2],(s2).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="518"><highlight class="preprocessor"><sp/><sp/>_vector_add_g((r).c[3],(s1).c[3],(s2).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r=s1-s2<sp/>(r,s1,s2<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_sub_g(r,s1,s2)<sp/>\</highlight></codeline>
<codeline lineno="522"><highlight class="preprocessor"><sp/><sp/>_vector_sub_g((r).c[0],(s1).c[0],(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="523"><highlight class="preprocessor"><sp/><sp/>_vector_sub_g((r).c[1],(s1).c[1],(s2).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="524"><highlight class="preprocessor"><sp/><sp/>_vector_sub_g((r).c[2],(s1).c[2],(s2).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="525"><highlight class="preprocessor"><sp/><sp/>_vector_sub_g((r).c[3],(s1).c[3],(s2).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r+=s<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_add_assign_g(r,s)<sp/>\</highlight></codeline>
<codeline lineno="529"><highlight class="preprocessor"><sp/><sp/>_vector_add_assign_g((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="530"><highlight class="preprocessor"><sp/><sp/>_vector_add_assign_g((r).c[1],(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="531"><highlight class="preprocessor"><sp/><sp/>_vector_add_assign_g((r).c[2],(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="532"><highlight class="preprocessor"><sp/><sp/>_vector_add_assign_g((r).c[3],(s).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r-=s<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_sub_assign_g(r,s)<sp/>\</highlight></codeline>
<codeline lineno="536"><highlight class="preprocessor"><sp/><sp/>_vector_sub_assign_g((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="537"><highlight class="preprocessor"><sp/><sp/>_vector_sub_assign_g((r).c[1],(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="538"><highlight class="preprocessor"><sp/><sp/>_vector_sub_assign_g((r).c[2],(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="539"><highlight class="preprocessor"><sp/><sp/>_vector_sub_assign_g((r).c[3],(s).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r+=i*s<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_i_add_assign_g(r,s)<sp/>\</highlight></codeline>
<codeline lineno="543"><highlight class="preprocessor"><sp/><sp/>_vector_i_add_assign_g((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="544"><highlight class="preprocessor"><sp/><sp/>_vector_i_add_assign_g((r).c[1],(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="545"><highlight class="preprocessor"><sp/><sp/>_vector_i_add_assign_g((r).c[2],(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="546"><highlight class="preprocessor"><sp/><sp/>_vector_i_add_assign_g((r).c[3],(s).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r-=i*s<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_i_sub_assign_g(r,s)<sp/>\</highlight></codeline>
<codeline lineno="550"><highlight class="preprocessor"><sp/><sp/>_vector_i_sub_assign_g((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="551"><highlight class="preprocessor"><sp/><sp/>_vector_i_sub_assign_g((r).c[1],(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="552"><highlight class="preprocessor"><sp/><sp/>_vector_i_sub_assign_g((r).c[2],(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="553"><highlight class="preprocessor"><sp/><sp/>_vector_i_sub_assign_g((r).c[3],(s).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=Real<sp/>part<sp/>of<sp/>the<sp/>scalar<sp/>product<sp/>r*s<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_prod_re_g(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="557"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="558"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_re_g((k),(r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="559"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_add_assign_re_g((k),(r).c[1],(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="560"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_add_assign_re_g((k),(r).c[2],(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="561"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_add_assign_re_g((k),(r).c[3],(s).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="562"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=Im<sp/>part<sp/>of<sp/>the<sp/>scalar<sp/>product<sp/>r*s<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_prod_im_g(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="566"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="567"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_im_g((k),(r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="568"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_add_assign_im_g((k),(r).c[1],(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="569"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_add_assign_im_g((k),(r).c[2],(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="570"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_add_assign_im_g((k),(r).c[3],(s).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="571"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>z=r*s<sp/>(r,s<sp/>spinors,<sp/>z<sp/>complex)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_prod_g(z,r,s)<sp/>\</highlight></codeline>
<codeline lineno="575"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="576"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_0(z);<sp/>\</highlight></codeline>
<codeline lineno="577"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_assign_g((z),(r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="578"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_assign_g((z),(r).c[1],(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="579"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_assign_g((z),(r).c[2],(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="580"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_assign_g((z),(r).c[3],(s).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="581"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>z+=r*s<sp/>(r,s<sp/>spinors,<sp/>z<sp/>complex)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_prod_assign_g(z,r,s)<sp/>\</highlight></codeline>
<codeline lineno="585"><highlight class="preprocessor"><sp/><sp/>_vector_prod_assign_g((z),(r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="586"><highlight class="preprocessor"><sp/><sp/>_vector_prod_assign_g((z),(r).c[1],(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="587"><highlight class="preprocessor"><sp/><sp/>_vector_prod_assign_g((z),(r).c[2],(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="588"><highlight class="preprocessor"><sp/><sp/>_vector_prod_assign_g((z),(r).c[3],(s).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=Real<sp/>part<sp/>of<sp/>the<sp/>scalar<sp/>product<sp/>(g5*r)*s<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_g5_prod_re_g(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="592"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="593"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_re_g((k),(r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="594"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_add_assign_re_g((k),(r).c[1],(s).c[1]);\</highlight></codeline>
<codeline lineno="595"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_sub_assign_re_g((k),(r).c[2],(s).c[2]);\</highlight></codeline>
<codeline lineno="596"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_sub_assign_re_g((k),(r).c[3],(s).c[3]);\</highlight></codeline>
<codeline lineno="597"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=Imaginary<sp/>part<sp/>of<sp/>the<sp/>scalar<sp/>product<sp/>(g5*r)*s<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_g5_prod_im_g(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="601"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="602"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_im_g((k),(r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="603"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_add_assign_im_g((k),(r).c[1],(s).c[1]);\</highlight></codeline>
<codeline lineno="604"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_sub_assign_im_g((k),(r).c[2],(s).c[2]);\</highlight></codeline>
<codeline lineno="605"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_sub_assign_im_g((k),(r).c[3],(s).c[3]);\</highlight></codeline>
<codeline lineno="606"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r-=z*s<sp/>(z<sp/>complex;<sp/>r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_project_g(r,z,s)<sp/>\</highlight></codeline>
<codeline lineno="610"><highlight class="preprocessor"><sp/><sp/>_vector_project_g((r).c[0],z,(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="611"><highlight class="preprocessor"><sp/><sp/>_vector_project_g((r).c[1],z,(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="612"><highlight class="preprocessor"><sp/><sp/>_vector_project_g((r).c[2],z,(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="613"><highlight class="preprocessor"><sp/><sp/>_vector_project_g((r).c[3],z,(s).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=(1-g0)/2<sp/>*<sp/>s<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_pminus_g(r,s)<sp/>\</highlight></codeline>
<codeline lineno="617"><highlight class="preprocessor"><sp/><sp/>_vector_add_g((r).c[0],(s).c[0],(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="618"><highlight class="preprocessor"><sp/><sp/>_vector_add_g((r).c[1],(s).c[1],(s).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="619"><highlight class="preprocessor"><sp/><sp/>_vector_mul_g((r).c[0],0.5,(r).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="620"><highlight class="preprocessor"><sp/><sp/>_vector_mul_g((r).c[1],0.5,(r).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="621"><highlight class="preprocessor"><sp/><sp/>(r).c[2]<sp/>=<sp/>(r).c[0];<sp/>\</highlight></codeline>
<codeline lineno="622"><highlight class="preprocessor"><sp/><sp/>(r).c[3]<sp/>=<sp/>(r).c[1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=(1+g0)/2<sp/>*<sp/>s<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_pplus_g(r,s)<sp/>\</highlight></codeline>
<codeline lineno="626"><highlight class="preprocessor"><sp/><sp/>_vector_sub_g((r).c[0],(s).c[0],(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="627"><highlight class="preprocessor"><sp/><sp/>_vector_sub_g((r).c[1],(s).c[1],(s).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="628"><highlight class="preprocessor"><sp/><sp/>_vector_mul_g((r).c[0],0.5,(r).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="629"><highlight class="preprocessor"><sp/><sp/>_vector_mul_g((r).c[1],0.5,(r).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="630"><highlight class="preprocessor"><sp/><sp/>_vector_mul_g((r).c[2],-1.,(r).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="631"><highlight class="preprocessor"><sp/><sp/>_vector_mul_g((r).c[3],-1.,(r).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Read<sp/>spinor<sp/>field<sp/>component<sp/>from<sp/>GPU<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(output)<sp/>v<sp/>=<sp/>suNg_vector<sp/>;<sp/>(input)<sp/>in<sp/>=<sp/>suNg_spinor*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(input)<sp/>iy<sp/>=<sp/>site<sp/>;<sp/>(input)<sp/>x<sp/>=<sp/>0..3<sp/>spinor<sp/>component;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>read_gpu_suNg_vector_flt(stride,v,in,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="637"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="638"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*2)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="639"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[0]=((hr_complex_flt*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="640"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[1]=((hr_complex_flt*)(in))[__iz];<sp/>\</highlight></codeline>
<codeline lineno="641"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>read_gpu_suNg_vector(stride,v,in,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="644"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="645"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*2)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="646"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[0]=((hr_complex*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="647"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[1]=((hr_complex*)(in))[__iz];<sp/>\</highlight></codeline>
<codeline lineno="648"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Write<sp/>spinor<sp/>field<sp/>component<sp/>to<sp/>GPU<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(input)<sp/>v<sp/>=<sp/>suNg_vector<sp/>;<sp/>(output)<sp/>out<sp/>=<sp/>suNg_spinor*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(input)<sp/>iy<sp/>=<sp/>site<sp/>;<sp/>(input)<sp/>x<sp/>=<sp/>0..3<sp/>spinor<sp/>component;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>write_gpu_suNg_vector_flt(stride,v,out,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="654"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="655"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*2)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="656"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((hr_complex_flt*)(out))[__iz]=(v).c[0];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="657"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((hr_complex_flt*)(out))[__iz]=(v).c[1];<sp/>\</highlight></codeline>
<codeline lineno="658"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>write_gpu_suNg_vector(stride,v,out,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="661"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="662"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*2)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="663"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((hr_complex*)(out))[__iz]=(v).c[0];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="664"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((hr_complex*)(out))[__iz]=(v).c[1];<sp/>\</highlight></codeline>
<codeline lineno="665"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Read<sp/>an<sp/>suN<sp/>algebra<sp/>vector<sp/>from<sp/>GPU<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(output)<sp/>v<sp/>=<sp/>suN_algebra_vector<sp/>;<sp/>(input)<sp/>in<sp/>=<sp/>suN_algebra_vector*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(input)<sp/>iy<sp/>=<sp/>site<sp/>;<sp/>(input)<sp/>x<sp/>=<sp/>0..3<sp/>direction;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_av_flt_read_gpu(stride,v,in,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="671"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="672"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*3)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="673"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[0]=((float*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="674"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[1]=((float*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="675"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[2]=((float*)(in))[__iz];<sp/>\</highlight></codeline>
<codeline lineno="676"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_av_read_gpu(stride,v,in,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="679"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="680"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*3)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="681"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[0]=((double*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="682"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[1]=((double*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="683"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[2]=((double*)(in))[__iz];<sp/>\</highlight></codeline>
<codeline lineno="684"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Write<sp/>an<sp/>suN<sp/>algebra<sp/>vector<sp/>to<sp/>GPU<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(input)<sp/>v<sp/>=<sp/>suN_algebra_vector<sp/>;<sp/>(output)<sp/>out<sp/>=<sp/>suN_algebra_vector*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(input)<sp/>iy<sp/>=<sp/>site<sp/>;<sp/>(input)<sp/>x<sp/>=<sp/>0..3<sp/>direction;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_av_flt_write_gpu(stride,v,out,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="690"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="691"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*3)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="692"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=(v).c[0];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="693"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=(v).c[1];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="694"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=(v).c[2];<sp/>\</highlight></codeline>
<codeline lineno="695"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNg_av_write_gpu(stride,v,out,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="698"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="699"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*3)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="700"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=(v).c[0];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="701"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=(v).c[1];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="702"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=(v).c[2];<sp/>\</highlight></codeline>
<codeline lineno="703"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Mul_add_assign<sp/>on<sp/>a<sp/>suN<sp/>algebra<sp/>vector<sp/>on<sp/>GPU<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(in/out)<sp/>v<sp/>=<sp/>suN_algebra_vector*<sp/>;<sp/>(input)<sp/>in<sp/>=<sp/>suN_algebra_vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(input)<sp/>iy<sp/>=<sp/>site<sp/>;<sp/>(input)<sp/>x<sp/>=<sp/>0..3<sp/>direction;<sp/>(input)<sp/>r<sp/>=<sp/>real<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_algebra_vector_mul_add_assign_gpu_g_flt(stride,v,iy,x,r,in)<sp/>\</highlight></codeline>
<codeline lineno="709"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="710"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*3)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="711"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(v))[__iz]+=(in).c[0]*(r);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="712"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(v))[__iz]+=(in).c[1]*(r);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="713"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(v))[__iz]+=(in).c[2]*(r);<sp/>\</highlight></codeline>
<codeline lineno="714"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_algebra_vector_mul_add_assign_gpu_g(stride,v,iy,x,r,in)<sp/>\</highlight></codeline>
<codeline lineno="717"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="718"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*3)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="719"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(v))[__iz]+=(in).c[0]*(r);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="720"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(v))[__iz]+=(in).c[1]*(r);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="721"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(v))[__iz]+=(in).c[2]*(r);<sp/>\</highlight></codeline>
<codeline lineno="722"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Read<sp/>an<sp/>suN<sp/>matrix<sp/>from<sp/>GPU<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(output)<sp/>v<sp/>=<sp/>suN<sp/>;<sp/>(input)<sp/>in<sp/>=<sp/>suN*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(input)<sp/>iy<sp/>=<sp/>site<sp/>;<sp/>(input)<sp/>x<sp/>=<sp/>0..3<sp/>direction;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>read_gpu_suNg_flt(stride,v,in,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="728"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="729"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*8)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="730"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>real_part,<sp/>imag_part;<sp/>\</highlight></codeline>
<codeline lineno="731"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>real_part<sp/>=<sp/>((float*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="732"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imag_part<sp/>=<sp/>((float*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="733"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[0]=hr_complex(real_part,<sp/>imag_part);<sp/>\</highlight></codeline>
<codeline lineno="734"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>real_part<sp/>=<sp/>((float*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="735"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imag_part<sp/>=<sp/>((float*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="736"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[1]=hr_complex(real_part,<sp/>imag_part);<sp/>\</highlight></codeline>
<codeline lineno="737"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>real_part<sp/>=<sp/>((float*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="738"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imag_part<sp/>=<sp/>((float*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="739"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[2]=hr_complex(real_part,<sp/>imag_part);<sp/>\</highlight></codeline>
<codeline lineno="740"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_part<sp/>=<sp/>((float*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="741"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imag_part<sp/>=<sp/>((float*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="742"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[3]=hr_complex(real_part,<sp/>imag_part);<sp/>\</highlight></codeline>
<codeline lineno="743"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>read_gpu_suNg(stride,v,in,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="746"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="747"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*8)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="748"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>real_part,<sp/>imag_part;<sp/>\</highlight></codeline>
<codeline lineno="749"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>real_part<sp/>=<sp/>((double*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="750"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imag_part<sp/>=<sp/>((double*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="751"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[0]=hr_complex(real_part,<sp/>imag_part);<sp/>\</highlight></codeline>
<codeline lineno="752"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>real_part<sp/>=<sp/>((double*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="753"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imag_part<sp/>=<sp/>((double*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="754"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[1]=hr_complex(real_part,<sp/>imag_part);<sp/>\</highlight></codeline>
<codeline lineno="755"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>real_part<sp/>=<sp/>((double*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="756"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imag_part<sp/>=<sp/>((double*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="757"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[2]=hr_complex(real_part,<sp/>imag_part);<sp/>\</highlight></codeline>
<codeline lineno="758"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_part<sp/>=<sp/>((double*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="759"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imag_part<sp/>=<sp/>((double*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="760"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[3]=hr_complex(real_part,<sp/>imag_part);<sp/>\</highlight></codeline>
<codeline lineno="761"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Write<sp/>an<sp/>suN<sp/>matrix<sp/>to<sp/>GPU<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(input)<sp/>v<sp/>=<sp/>suN<sp/>;<sp/>(output)<sp/>out<sp/>=<sp/>suN*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(input)<sp/>iy<sp/>=<sp/>site<sp/>;<sp/>(input)<sp/>x<sp/>=<sp/>0..3<sp/>direction;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>write_gpu_suNg_flt(stride,v,out,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="767"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="768"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*8)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="769"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=_complex_re((v).c[0]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="770"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=_complex_im((v).c[0]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="771"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=_complex_re((v).c[1]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="772"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=_complex_im((v).c[1]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="773"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=_complex_re((v).c[2]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="774"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=_complex_im((v).c[2]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="775"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=_complex_re((v).c[3]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="776"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=_complex_im((v).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="777"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>write_gpu_suNg(stride,v,out,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="780"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="781"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*8)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="782"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=_complex_re((v).c[0]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="783"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=_complex_im((v).c[0]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="784"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=_complex_re((v).c[1]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="785"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=_complex_im((v).c[1]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="786"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=_complex_re((v).c[2]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="787"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=_complex_im((v).c[2]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="788"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=_complex_re((v).c[3]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="789"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=_complex_im((v).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="790"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="793"><highlight class="comment">*</highlight></codeline>
<codeline lineno="794"><highlight class="comment">*<sp/>The<sp/>following<sp/>macros<sp/>are<sp/>the<sp/>same<sp/>for<sp/>single<sp/>and<sp/>double<sp/>precision<sp/>types</highlight></codeline>
<codeline lineno="795"><highlight class="comment">*</highlight></codeline>
<codeline lineno="796"><highlight class="comment">*<sp/>Depending<sp/>on<sp/>the<sp/>macro,<sp/>arguments<sp/>are<sp/>variables<sp/>of<sp/>type<sp/>suN_vector<sp/>and<sp/>suN</highlight></codeline>
<codeline lineno="797"><highlight class="comment">*<sp/>(or<sp/>suN_vector_flt<sp/>and<sp/>suN_flt)</highlight></codeline>
<codeline lineno="798"><highlight class="comment">*</highlight></codeline>
<codeline lineno="799"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_zero_f(r)<sp/>\</highlight></codeline>
<codeline lineno="803"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_0((r).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="804"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_0((r).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=-s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_minus_f(r,s)<sp/>\</highlight></codeline>
<codeline lineno="808"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_minus((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="809"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_minus((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=<sp/>i*s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_i_plus_f(r,s)<sp/>\</highlight></codeline>
<codeline lineno="813"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_plus((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="814"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_plus((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=-i*s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_i_minus_f(r,s)<sp/>\</highlight></codeline>
<codeline lineno="818"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_minus((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="819"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_minus((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=k*s<sp/>(k<sp/>real)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_mul_f(r,k,s)<sp/>\</highlight></codeline>
<codeline lineno="823"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mulr((r).c[0],(k),(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="824"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mulr((r).c[1],(k),(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=z*s<sp/>(z<sp/>complex)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_mulc_f(r,z,s)<sp/>\</highlight></codeline>
<codeline lineno="828"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul((r).c[0],(z),(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="829"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul((r).c[1],(z),(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=(z^+)*s<sp/>(z<sp/>complex)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_mulc_star_f(r,z,s)<sp/>\</highlight></codeline>
<codeline lineno="833"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_star((r).c[0],(s).c[0],(z));<sp/>\</highlight></codeline>
<codeline lineno="834"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_star((r).c[1],(s).c[1],(z))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=s1+s2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_add_f(r,s1,s2)<sp/>\</highlight></codeline>
<codeline lineno="838"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_add((r).c[0],(s1).c[0],(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="839"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_add((r).c[1],(s1).c[1],(s2).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=s1-s2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_sub_f(r,s1,s2)<sp/>\</highlight></codeline>
<codeline lineno="843"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_sub((r).c[0],(s1).c[0],(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="844"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_sub((r).c[1],(s1).c[1],(s2).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=s1+i*s2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_i_add_f(r,s1,s2)<sp/>\</highlight></codeline>
<codeline lineno="848"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_add((r).c[0],(s1).c[0],(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="849"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_add((r).c[1],(s1).c[1],(s2).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=s1-i*s2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_i_sub_f(r,s1,s2)<sp/>\</highlight></codeline>
<codeline lineno="853"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_sub((r).c[0],(s1).c[0],(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="854"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_sub((r).c[1],(s1).c[1],(s2).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r+=s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_add_assign_f(r,s)<sp/>\</highlight></codeline>
<codeline lineno="858"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_add_assign((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="859"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_add_assign((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r-=s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_sub_assign_f(r,s)<sp/>\</highlight></codeline>
<codeline lineno="863"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_sub_assign((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="864"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_sub_assign((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r+=i*s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_i_add_assign_f(r,s)<sp/>\</highlight></codeline>
<codeline lineno="868"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_add_assign((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="869"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_add_assign((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r-=i*s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_i_sub_assign_f(r,s)<sp/>\</highlight></codeline>
<codeline lineno="873"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_sub_assign((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="874"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_i_sub_assign((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=r^*s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_prod_f(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="878"><highlight class="preprocessor"><sp/><sp/><sp/>(k)=_complex_prod((r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="879"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=Re(r^*s)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_prod_re_f(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="883"><highlight class="preprocessor"><sp/><sp/><sp/>(k)=_complex_prod_re((r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="884"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod_re((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=Im(r*s)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_prod_im_f(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="888"><highlight class="preprocessor"><sp/><sp/><sp/>(k)=_complex_prod_im((r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="889"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod_im((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r+=z*s<sp/>(z<sp/>complex)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_mulc_add_assign_f(r,z,s)<sp/>\</highlight></codeline>
<codeline lineno="893"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_assign((r).c[0],(z),(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="894"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_assign((r).c[1],(z),(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r+=k*s<sp/>(k<sp/>real)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_mul_add_assign_f(r,k,s)<sp/>\</highlight></codeline>
<codeline lineno="898"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mulr_assign((r).c[0],(k),(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="899"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mulr_assign((r).c[1],(k),(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=k1*s1+k2*s2<sp/>(k1,k2<sp/>real,<sp/>s1,s2<sp/>vectors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_lc_f(r,k1,s1,k2,s2)<sp/>\</highlight></codeline>
<codeline lineno="903"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_rlc((r).c[0],(k1),(s1).c[0],(k2),(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="904"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_rlc((r).c[1],(k1),(s1).c[1],(k2),(s2).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r+=k1*s1+k2*s2<sp/>(k1,k2<sp/>real,<sp/>s1,s2<sp/>vectors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_lc_add_assign_f(r,k1,s1,k2,s2)<sp/>\</highlight></codeline>
<codeline lineno="908"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_rlc_assign((r).c[0],(k1),(s1).c[0],(k2),(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="909"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_rlc_assign((r).c[1],(k1),(s1).c[1],(k2),(s2).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=z1*s1+z2*s2<sp/>(z1,z2<sp/>complex,<sp/>s1,s2<sp/>vectors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_clc_f(r,z1,s1,z2,s2)<sp/>\</highlight></codeline>
<codeline lineno="913"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_clc((r).c[0],(z1),(s1).c[0],(z2),(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="914"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_clc((r).c[1],(z1),(s1).c[1],(z2),(s2).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=z1*s1+z2*s2<sp/>(z1,z2<sp/>complex,<sp/>s1,s2<sp/>vectors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_clc_add_assign_f(r,z1,s1,z2,s2)<sp/>\</highlight></codeline>
<codeline lineno="918"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_clc_assign((r).c[0],(z1),(s1).c[0],(z2),(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="919"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_clc_assign((r).c[1],(z1),(s1).c[1],(z2),(s2).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>z+=r^*s<sp/>(c<sp/>complex)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_prod_assign_f(z,r,s)<sp/>\</highlight></codeline>
<codeline lineno="923"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_prod_assign((z),(r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="924"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_prod_assign((z),(r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k+=Re(r^*s)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_prod_add_assign_re_f(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="928"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod_re((r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="929"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod_re((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k+=Im(r*s)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_prod_add_assign_im_f(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="933"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod_im((r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="934"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod_im((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k-=Re(r^*s)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_prod_sub_assign_re_f(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="938"><highlight class="preprocessor"><sp/><sp/><sp/>(k)-=_complex_prod_re((r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="939"><highlight class="preprocessor"><sp/><sp/><sp/>(k)-=_complex_prod_re((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k-=Im(r*s)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_prod_sub_assign_im_f(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="943"><highlight class="preprocessor"><sp/><sp/><sp/>(k)-=_complex_prod_im((r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="944"><highlight class="preprocessor"><sp/><sp/><sp/>(k)-=_complex_prod_im((r).c[1],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r-=z*s<sp/>(z<sp/>complex)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_vector_project_f(r,z,s)<sp/>\</highlight></codeline>
<codeline lineno="948"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_sub_assign((r).c[0],(z),(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="949"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_sub_assign((r).c[1],(z),(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="952"><highlight class="comment">*</highlight></codeline>
<codeline lineno="953"><highlight class="comment">*<sp/>Macros<sp/>for<sp/>SU(N)<sp/>matrices</highlight></codeline>
<codeline lineno="954"><highlight class="comment">*</highlight></codeline>
<codeline lineno="955"><highlight class="comment">*<sp/>Arguments<sp/>are<sp/>variables<sp/>of<sp/>type<sp/>suN</highlight></codeline>
<codeline lineno="956"><highlight class="comment">*</highlight></codeline>
<codeline lineno="957"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=v^dagger<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_dagger(u,v)<sp/>\</highlight></codeline>
<codeline lineno="961"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_star((u).c[0],(v).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="962"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_star((u).c[1],(v).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="963"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_star((u).c[2],(v).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="964"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_star((u).c[3],(v).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=v*w<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_times_suNf(u,v,w)<sp/>\</highlight></codeline>
<codeline lineno="968"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul((u).c[0],(v).c[0],(w).c[0]);\</highlight></codeline>
<codeline lineno="969"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[0],(v).c[1],(w).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="970"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul((u).c[1],(v).c[0],(w).c[1]);\</highlight></codeline>
<codeline lineno="971"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[1],(v).c[1],(w).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="972"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul((u).c[2],(v).c[2],(w).c[0]);\</highlight></codeline>
<codeline lineno="973"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[2],(v).c[3],(w).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="974"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul((u).c[3],(v).c[2],(w).c[1]);\</highlight></codeline>
<codeline lineno="975"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[3],(v).c[3],(w).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u+=v*w<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_times_suNf_assign(u,v,w)<sp/>\</highlight></codeline>
<codeline lineno="979"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[0],(v).c[0],(w).c[0]);\</highlight></codeline>
<codeline lineno="980"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[0],(v).c[1],(w).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="981"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[1],(v).c[0],(w).c[1]);\</highlight></codeline>
<codeline lineno="982"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[1],(v).c[1],(w).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="983"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[2],(v).c[2],(w).c[0]);\</highlight></codeline>
<codeline lineno="984"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[2],(v).c[3],(w).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="985"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[3],(v).c[2],(w).c[1]);\</highlight></codeline>
<codeline lineno="986"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((u).c[3],(v).c[3],(w).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=v*w^+<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_times_suNf_dagger(u,v,w)<sp/>\</highlight></codeline>
<codeline lineno="990"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star((u).c[0],(v).c[0],(w).c[0]);\</highlight></codeline>
<codeline lineno="991"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star_assign((u).c[0],(v).c[1],(w).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="992"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star((u).c[1],(v).c[0],(w).c[2]);\</highlight></codeline>
<codeline lineno="993"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star_assign((u).c[1],(v).c[1],(w).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="994"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star((u).c[2],(v).c[2],(w).c[0]);\</highlight></codeline>
<codeline lineno="995"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star_assign((u).c[2],(v).c[3],(w).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="996"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star((u).c[3],(v).c[2],(w).c[2]);\</highlight></codeline>
<codeline lineno="997"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star_assign((u).c[3],(v).c[3],(w).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=v^+*w<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_dagger_times_suNf(u,v,w)<sp/>\</highlight></codeline>
<codeline lineno="1001"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star((u).c[0],(w).c[0],(v).c[0]);\</highlight></codeline>
<codeline lineno="1002"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star_assign((u).c[0],(w).c[2],(v).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1003"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star((u).c[1],(w).c[1],(v).c[0]);\</highlight></codeline>
<codeline lineno="1004"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star_assign((u).c[1],(w).c[3],(v).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1005"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star((u).c[2],(w).c[0],(v).c[1]);\</highlight></codeline>
<codeline lineno="1006"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star_assign((u).c[2],(w).c[2],(v).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="1007"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star((u).c[3],(w).c[1],(v).c[1]);\</highlight></codeline>
<codeline lineno="1008"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star_assign((u).c[3],(w).c[3],(v).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_unit(u)<sp/>\</highlight></codeline>
<codeline lineno="1012"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_1((u).c[0]);\</highlight></codeline>
<codeline lineno="1013"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_0((u).c[1]);\</highlight></codeline>
<codeline lineno="1014"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_0((u).c[2]);\</highlight></codeline>
<codeline lineno="1015"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_1((u).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=-v<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_minus(u,v)<sp/>\</highlight></codeline>
<codeline lineno="1019"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_minus((u).c[0],(v).c[0]);\</highlight></codeline>
<codeline lineno="1020"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_minus((u).c[1],(v).c[1]);\</highlight></codeline>
<codeline lineno="1021"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_minus((u).c[2],(v).c[2]);\</highlight></codeline>
<codeline lineno="1022"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_minus((u).c[3],(v).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=r*v<sp/>(u,v<sp/>mat,<sp/>r<sp/>real)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_mul(u,r,v)<sp/>\</highlight></codeline>
<codeline lineno="1026"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mulr((u).c[0],(r),(v).c[0]);\</highlight></codeline>
<codeline lineno="1027"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mulr((u).c[1],(r),(v).c[1]);\</highlight></codeline>
<codeline lineno="1028"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mulr((u).c[2],(r),(v).c[2]);\</highlight></codeline>
<codeline lineno="1029"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mulr((u).c[3],(r),(v).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u*=r<sp/>(u<sp/>mat,<sp/>r<sp/>real)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_mul_assign(u,r)<sp/>\</highlight></codeline>
<codeline lineno="1033"><highlight class="preprocessor"><sp/><sp/><sp/>(u).c[0]*=(r);\</highlight></codeline>
<codeline lineno="1034"><highlight class="preprocessor"><sp/><sp/><sp/>(u).c[1]*=(r);\</highlight></codeline>
<codeline lineno="1035"><highlight class="preprocessor"><sp/><sp/><sp/>(u).c[2]*=(r);\</highlight></codeline>
<codeline lineno="1036"><highlight class="preprocessor"><sp/><sp/><sp/>(u).c[3]*=(r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=r*v<sp/>(u,v<sp/>mat,<sp/>r<sp/>complex)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_mulc(u,r,v)<sp/>\</highlight></codeline>
<codeline lineno="1040"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul((u).c[0],(r),(v).c[0]);\</highlight></codeline>
<codeline lineno="1041"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul((u).c[1],(r),(v).c[1]);\</highlight></codeline>
<codeline lineno="1042"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul((u).c[2],(r),(v).c[2]);\</highlight></codeline>
<codeline lineno="1043"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul((u).c[3],(r),(v).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=r*v+m*w<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_mul_add(u,r,v,m,w)<sp/>\</highlight></codeline>
<codeline lineno="1047"><highlight class="preprocessor"><sp/><sp/><sp/>(u).c[0]=(r)*(v).c[0]+(m)*(w).c[0];\</highlight></codeline>
<codeline lineno="1048"><highlight class="preprocessor"><sp/><sp/><sp/>(u).c[1]=(r)*(v).c[1]+(m)*(w).c[1];\</highlight></codeline>
<codeline lineno="1049"><highlight class="preprocessor"><sp/><sp/><sp/>(u).c[2]=(r)*(v).c[2]+(m)*(w).c[2];\</highlight></codeline>
<codeline lineno="1050"><highlight class="preprocessor"><sp/><sp/><sp/>(u).c[3]=(r)*(v).c[3]+(m)*(w).c[3]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u+=v<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_add_assign(u,v)<sp/>\</highlight></codeline>
<codeline lineno="1054"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_add_assign((u).c[0],(v).c[0]);\</highlight></codeline>
<codeline lineno="1055"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_add_assign((u).c[1],(v).c[1]);\</highlight></codeline>
<codeline lineno="1056"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_add_assign((u).c[2],(v).c[2]);\</highlight></codeline>
<codeline lineno="1057"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_add_assign((u).c[3],(v).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u-=v<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_sub_assign(u,v)<sp/>\</highlight></codeline>
<codeline lineno="1061"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_sub_assign((u).c[0],(v).c[0]);\</highlight></codeline>
<codeline lineno="1062"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_sub_assign((u).c[1],(v).c[1]);\</highlight></codeline>
<codeline lineno="1063"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_sub_assign((u).c[2],(v).c[2]);\</highlight></codeline>
<codeline lineno="1064"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_sub_assign((u).c[3],(v).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=|<sp/>u<sp/>|2<sp/>)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_sqnorm(k,u)<sp/>\</highlight></codeline>
<codeline lineno="1068"><highlight class="preprocessor"><sp/><sp/><sp/>(k)=0.;\</highlight></codeline>
<codeline lineno="1069"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod_re((u).c[0],(u).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1070"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod_re((u).c[1],(u).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1071"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod_re((u).c[2],(u).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1072"><highlight class="preprocessor"><sp/><sp/><sp/>(k)+=_complex_prod_re((u).c[3],(u).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=|<sp/>1<sp/>-<sp/>u<sp/>|2<sp/>)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_sqnorm_m1(k,u)<sp/>\</highlight></codeline>
<codeline lineno="1076"><highlight class="preprocessor"><sp/><sp/><sp/>(k)=\</highlight></codeline>
<codeline lineno="1077"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>+_complex_prod_m1_re((u).c[0],(u).c[0])\</highlight></codeline>
<codeline lineno="1078"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>+_complex_prod_re((u).c[1],(u).c[1])\</highlight></codeline>
<codeline lineno="1079"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>+_complex_prod_re((u).c[2],(u).c[2])\</highlight></codeline>
<codeline lineno="1080"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>+_complex_prod_m1_re((u).c[3],(u).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=<sp/>Tr<sp/>(u)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_trace(k,u)<sp/>\</highlight></codeline>
<codeline lineno="1084"><highlight class="preprocessor"><sp/><sp/><sp/>(k)=((u).c[0])+<sp/>\</highlight></codeline>
<codeline lineno="1085"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((u).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=Re<sp/>Tr<sp/>(u)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_trace_re(k,u)<sp/>\</highlight></codeline>
<codeline lineno="1089"><highlight class="preprocessor"><sp/><sp/><sp/>(k)=_complex_re((u).c[0])+<sp/>\</highlight></codeline>
<codeline lineno="1090"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_complex_re((u).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=Im<sp/>Tr<sp/>(u)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_trace_im(k,u)<sp/>\</highlight></codeline>
<codeline lineno="1094"><highlight class="preprocessor"><sp/><sp/><sp/>(k)=_complex_im((u).c[0])+<sp/>\</highlight></codeline>
<codeline lineno="1095"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_complex_im((u).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>fuction<sp/>compute<sp/>the<sp/>hmc<sp/>force<sp/>matrix<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>this<sp/>fuction<sp/>accumulates<sp/>on<sp/>the<sp/>original<sp/>matrix<sp/>u<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_FMAT(u,s)<sp/>\</highlight></codeline>
<codeline lineno="1100"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_star_assign((u).c[0],(s).c[0].c[0],(s).c[2].c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1101"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_star_assign((u).c[0],(s).c[1].c[0],(s).c[3].c[0]);\</highlight></codeline>
<codeline lineno="1102"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_star_assign((u).c[1],(s).c[0].c[0],(s).c[2].c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1103"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_star_assign((u).c[1],(s).c[1].c[0],(s).c[3].c[1]);\</highlight></codeline>
<codeline lineno="1104"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_star_assign((u).c[2],(s).c[0].c[1],(s).c[2].c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1105"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_star_assign((u).c[2],(s).c[1].c[1],(s).c[3].c[0]);\</highlight></codeline>
<codeline lineno="1106"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_star_assign((u).c[3],(s).c[0].c[1],(s).c[2].c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1107"><highlight class="preprocessor"><sp/><sp/><sp/>_complex_mul_star_assign((u).c[3],(s).c[1].c[1],(s).c[3].c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SU(N)<sp/>matrix<sp/>u<sp/>times<sp/>SU(N)<sp/>vector<sp/>s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=u*s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_multiply(r,u,s)<sp/>\</highlight></codeline>
<codeline lineno="1112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul((r).c[0],(u).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="1113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((r).c[0],(u).c[1],(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul((r).c[1],(u).c[2],(s).c[0]);\</highlight></codeline>
<codeline lineno="1115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_assign((r).c[1],(u).c[3],(s).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SU(N)<sp/>matrix<sp/>u^dagger<sp/>times<sp/>SU(N)<sp/>vector<sp/>s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=(u^dagger)*s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_inverse_multiply(r,u,s)<sp/>\</highlight></codeline>
<codeline lineno="1120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star((r).c[0],(s).c[0],(u).c[0]);\</highlight></codeline>
<codeline lineno="1121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star_assign((r).c[0],(s).c[1],(u).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star((r).c[1],(s).c[0],(u).c[1]);\</highlight></codeline>
<codeline lineno="1123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_mul_star_assign((r).c[1],(s).c[1],(u).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_zero(u)<sp/>\</highlight></codeline>
<codeline lineno="1127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_complex_0((u).c[0]);\</highlight></codeline>
<codeline lineno="1128"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_complex_0((u).c[1]);\</highlight></codeline>
<codeline lineno="1129"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_complex_0((u).c[2]);\</highlight></codeline>
<codeline lineno="1130"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_complex_0((u).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNfc_multiply(a,b,c)<sp/>_suNf_multiply(a,b,c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNfc_inverse_multiply(a,b,c)<sp/>_suNf_inverse_multiply(a,b,c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNfc_zero(a)<sp/>_suNf_zero(a)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNfc_dagger(u,v)<sp/>_suNf_dagger(u,v)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNfc_mul(u,r,v)<sp/>_suNf_mul(u,r,v)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNfc_mul_assign(u,r)<sp/>_suNf_mul_assign(u,r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNfc_times_suNfc(u,v,w)<sp/>_suNf_times_suNf(u,v,w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNfc_times_suNfc_assign(u,v,w)<sp/>_suNf_times_suNf_assign(u,v,w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNfc_trace(k,u)<sp/>_suNf_trace(k,u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNfc_unit(u)<sp/>_suNf_unit(u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNfc_mul_add(u,r,v,m,w)<sp/>_suNf_mul_add(u,r,v,m,w)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNfc_add_assign(u,v)<sp/>_suNf_add_assign(u,v)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNfc_sqnorm(k,u)<sp/>_suNf_sqnorm(k,u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>u=0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_FMAT_zero(u)<sp/>\</highlight></codeline>
<codeline lineno="1160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_complex_0((u).c[0]);\</highlight></codeline>
<codeline lineno="1161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_complex_0((u).c[1]);\</highlight></codeline>
<codeline lineno="1162"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_complex_0((u).c[2]);\</highlight></codeline>
<codeline lineno="1163"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_complex_0((u).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="1166"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1167"><highlight class="comment">*<sp/>Macros<sp/>for<sp/>spinors</highlight></codeline>
<codeline lineno="1168"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1169"><highlight class="comment">*<sp/>Arguments<sp/>are<sp/>variables<sp/>of<sp/>type<sp/>spinors</highlight></codeline>
<codeline lineno="1170"><highlight class="comment">*</highlight></codeline>
<codeline lineno="1171"><highlight class="comment">*******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r=0<sp/><sp/>(r<sp/>spinor)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_zero_f(r)<sp/>\</highlight></codeline>
<codeline lineno="1175"><highlight class="preprocessor"><sp/><sp/>_vector_zero_f((r).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1176"><highlight class="preprocessor"><sp/><sp/>_vector_zero_f((r).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1177"><highlight class="preprocessor"><sp/><sp/>_vector_zero_f((r).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1178"><highlight class="preprocessor"><sp/><sp/>_vector_zero_f((r).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>s=g5*r<sp/>(r,s<sp/>spinors,<sp/>g5<sp/>matrix)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_g5_f(s,r)<sp/>\</highlight></codeline>
<codeline lineno="1182"><highlight class="preprocessor"><sp/><sp/>(s).c[0]=(r).c[0];<sp/>\</highlight></codeline>
<codeline lineno="1183"><highlight class="preprocessor"><sp/><sp/>(s).c[1]=(r).c[1];<sp/>\</highlight></codeline>
<codeline lineno="1184"><highlight class="preprocessor"><sp/><sp/>_vector_minus_f((s).c[2],(r).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1185"><highlight class="preprocessor"><sp/><sp/>_vector_minus_f((s).c[3],(r).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r=g5*r<sp/>(r,s<sp/>spinors,<sp/>g5<sp/>matrix)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_g5_assign_f(r)<sp/>\</highlight></codeline>
<codeline lineno="1189"><highlight class="preprocessor"><sp/><sp/>_vector_minus_f((r).c[2],(r).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1190"><highlight class="preprocessor"><sp/><sp/>_vector_minus_f((r).c[3],(r).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>s=-r<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_minus_f(s,r)<sp/>\</highlight></codeline>
<codeline lineno="1194"><highlight class="preprocessor"><sp/><sp/>_vector_minus_f((s).c[0],(r).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1195"><highlight class="preprocessor"><sp/><sp/>_vector_minus_f((s).c[1],(r).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1196"><highlight class="preprocessor"><sp/><sp/>_vector_minus_f((s).c[2],(r).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1197"><highlight class="preprocessor"><sp/><sp/>_vector_minus_f((s).c[3],(r).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r=k*s<sp/>(k<sp/>real;<sp/>r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_mul_f(r,k,s)<sp/>\</highlight></codeline>
<codeline lineno="1201"><highlight class="preprocessor"><sp/><sp/>_vector_mul_f((r).c[0],k,(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1202"><highlight class="preprocessor"><sp/><sp/>_vector_mul_f((r).c[1],k,(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1203"><highlight class="preprocessor"><sp/><sp/>_vector_mul_f((r).c[2],k,(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1204"><highlight class="preprocessor"><sp/><sp/>_vector_mul_f((r).c[3],k,(s).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r=z*s<sp/>(z<sp/>complex;<sp/>r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_mulc_f(r,z,s)<sp/>\</highlight></codeline>
<codeline lineno="1208"><highlight class="preprocessor"><sp/><sp/>_vector_mulc_f((r).c[0],z,(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1209"><highlight class="preprocessor"><sp/><sp/>_vector_mulc_f((r).c[1],z,(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1210"><highlight class="preprocessor"><sp/><sp/>_vector_mulc_f((r).c[2],z,(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1211"><highlight class="preprocessor"><sp/><sp/>_vector_mulc_f((r).c[3],z,(s).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r+=z*s<sp/>(z<sp/>complex;<sp/>r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_mulc_add_assign_f(r,z,s)<sp/>\</highlight></codeline>
<codeline lineno="1215"><highlight class="preprocessor"><sp/><sp/>_vector_mulc_add_assign_f((r).c[0],(z),(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1216"><highlight class="preprocessor"><sp/><sp/>_vector_mulc_add_assign_f((r).c[1],(z),(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1217"><highlight class="preprocessor"><sp/><sp/>_vector_mulc_add_assign_f((r).c[2],(z),(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1218"><highlight class="preprocessor"><sp/><sp/>_vector_mulc_add_assign_f((r).c[3],(z),(s).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r+=k*s<sp/>(k<sp/>real;<sp/>r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_mul_add_assign_f(r,k,s)<sp/>\</highlight></codeline>
<codeline lineno="1222"><highlight class="preprocessor"><sp/><sp/>_vector_mul_add_assign_f((r).c[0],(k),(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1223"><highlight class="preprocessor"><sp/><sp/>_vector_mul_add_assign_f((r).c[1],(k),(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1224"><highlight class="preprocessor"><sp/><sp/>_vector_mul_add_assign_f((r).c[2],(k),(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1225"><highlight class="preprocessor"><sp/><sp/>_vector_mul_add_assign_f((r).c[3],(k),(s).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r=k1*s1+k2*s2<sp/>(k1,k2<sp/>real;<sp/>r,s1,s2<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_lc_f(r,k1,s1,k2,s2)<sp/>\</highlight></codeline>
<codeline lineno="1229"><highlight class="preprocessor"><sp/><sp/>_vector_lc_f((r).c[0],(k1),(s1).c[0],(k2),(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1230"><highlight class="preprocessor"><sp/><sp/>_vector_lc_f((r).c[1],(k1),(s1).c[1],(k2),(s2).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1231"><highlight class="preprocessor"><sp/><sp/>_vector_lc_f((r).c[2],(k1),(s1).c[2],(k2),(s2).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1232"><highlight class="preprocessor"><sp/><sp/>_vector_lc_f((r).c[3],(k1),(s1).c[3],(k2),(s2).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r+=k1*s1+k2*s2<sp/>(k1,k2<sp/>real;<sp/>r,s1,s2<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_lc_add_assign_f(r,k1,s1,k2,s2)<sp/>\</highlight></codeline>
<codeline lineno="1236"><highlight class="preprocessor"><sp/><sp/>_vector_lc_add_assign_f((r).c[0],(k1),(s1).c[0],(k2),(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1237"><highlight class="preprocessor"><sp/><sp/>_vector_lc_add_assign_f((r).c[1],(k1),(s1).c[1],(k2),(s2).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1238"><highlight class="preprocessor"><sp/><sp/>_vector_lc_add_assign_f((r).c[2],(k1),(s1).c[2],(k2),(s2).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1239"><highlight class="preprocessor"><sp/><sp/>_vector_lc_add_assign_f((r).c[3],(k1),(s1).c[3],(k2),(s2).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r=z1*s1+z2*s2<sp/>(z1,z2<sp/>complex;<sp/>r,s1,s2<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_clc_f(r,z1,s1,z2,s2)<sp/>\</highlight></codeline>
<codeline lineno="1243"><highlight class="preprocessor"><sp/><sp/>_vector_clc_f((r).c[0],(z1),(s1).c[0],(z2),(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1244"><highlight class="preprocessor"><sp/><sp/>_vector_clc_f((r).c[1],(z1),(s1).c[1],(z2),(s2).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1245"><highlight class="preprocessor"><sp/><sp/>_vector_clc_f((r).c[2],(z1),(s1).c[2],(z2),(s2).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1246"><highlight class="preprocessor"><sp/><sp/>_vector_clc_f((r).c[3],(z1),(s1).c[3],(z2),(s2).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r+=z1*s1+z2*s2<sp/>(z1,z2<sp/>complex;<sp/>r,s1,s2<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_clc_add_assign_f(r,z1,s1,z2,s2)<sp/>\</highlight></codeline>
<codeline lineno="1250"><highlight class="preprocessor"><sp/><sp/>_vector_clc_add_assign_f((r).c[0],(z1),(s1).c[0],(z2),(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1251"><highlight class="preprocessor"><sp/><sp/>_vector_clc_add_assign_f((r).c[1],(z1),(s1).c[1],(z2),(s2).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1252"><highlight class="preprocessor"><sp/><sp/>_vector_clc_add_assign_f((r).c[2],(z1),(s1).c[2],(z2),(s2).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1253"><highlight class="preprocessor"><sp/><sp/>_vector_clc_add_assign_f((r).c[3],(z1),(s1).c[3],(z2),(s2).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r=s1+s2<sp/>(r,s1,s2<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_add_f(r,s1,s2)<sp/>\</highlight></codeline>
<codeline lineno="1257"><highlight class="preprocessor"><sp/><sp/>_vector_add_f((r).c[0],(s1).c[0],(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1258"><highlight class="preprocessor"><sp/><sp/>_vector_add_f((r).c[1],(s1).c[1],(s2).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1259"><highlight class="preprocessor"><sp/><sp/>_vector_add_f((r).c[2],(s1).c[2],(s2).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1260"><highlight class="preprocessor"><sp/><sp/>_vector_add_f((r).c[3],(s1).c[3],(s2).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r=s1-s2<sp/>(r,s1,s2<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_sub_f(r,s1,s2)<sp/>\</highlight></codeline>
<codeline lineno="1264"><highlight class="preprocessor"><sp/><sp/>_vector_sub_f((r).c[0],(s1).c[0],(s2).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1265"><highlight class="preprocessor"><sp/><sp/>_vector_sub_f((r).c[1],(s1).c[1],(s2).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1266"><highlight class="preprocessor"><sp/><sp/>_vector_sub_f((r).c[2],(s1).c[2],(s2).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1267"><highlight class="preprocessor"><sp/><sp/>_vector_sub_f((r).c[3],(s1).c[3],(s2).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r+=s<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_add_assign_f(r,s)<sp/>\</highlight></codeline>
<codeline lineno="1271"><highlight class="preprocessor"><sp/><sp/>_vector_add_assign_f((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1272"><highlight class="preprocessor"><sp/><sp/>_vector_add_assign_f((r).c[1],(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1273"><highlight class="preprocessor"><sp/><sp/>_vector_add_assign_f((r).c[2],(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1274"><highlight class="preprocessor"><sp/><sp/>_vector_add_assign_f((r).c[3],(s).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r-=s<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_sub_assign_f(r,s)<sp/>\</highlight></codeline>
<codeline lineno="1278"><highlight class="preprocessor"><sp/><sp/>_vector_sub_assign_f((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1279"><highlight class="preprocessor"><sp/><sp/>_vector_sub_assign_f((r).c[1],(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1280"><highlight class="preprocessor"><sp/><sp/>_vector_sub_assign_f((r).c[2],(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1281"><highlight class="preprocessor"><sp/><sp/>_vector_sub_assign_f((r).c[3],(s).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r+=i*s<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_i_add_assign_f(r,s)<sp/>\</highlight></codeline>
<codeline lineno="1285"><highlight class="preprocessor"><sp/><sp/>_vector_i_add_assign_f((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1286"><highlight class="preprocessor"><sp/><sp/>_vector_i_add_assign_f((r).c[1],(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1287"><highlight class="preprocessor"><sp/><sp/>_vector_i_add_assign_f((r).c[2],(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1288"><highlight class="preprocessor"><sp/><sp/>_vector_i_add_assign_f((r).c[3],(s).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>r-=i*s<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_i_sub_assign_f(r,s)<sp/>\</highlight></codeline>
<codeline lineno="1292"><highlight class="preprocessor"><sp/><sp/>_vector_i_sub_assign_f((r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1293"><highlight class="preprocessor"><sp/><sp/>_vector_i_sub_assign_f((r).c[1],(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1294"><highlight class="preprocessor"><sp/><sp/>_vector_i_sub_assign_f((r).c[2],(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1295"><highlight class="preprocessor"><sp/><sp/>_vector_i_sub_assign_f((r).c[3],(s).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=Real<sp/>part<sp/>of<sp/>the<sp/>scalar<sp/>product<sp/>r*s<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_prod_re_f(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="1299"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1300"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_re_f((k),(r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="1301"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_add_assign_re_f((k),(r).c[1],(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1302"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_add_assign_re_f((k),(r).c[2],(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1303"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_add_assign_re_f((k),(r).c[3],(s).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="1304"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=Im<sp/>part<sp/>of<sp/>the<sp/>scalar<sp/>product<sp/>r*s<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_prod_im_f(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="1308"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1309"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_im_f((k),(r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="1310"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_add_assign_im_f((k),(r).c[1],(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1311"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_add_assign_im_f((k),(r).c[2],(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1312"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_add_assign_im_f((k),(r).c[3],(s).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="1313"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>z=r*s<sp/>(r,s<sp/>spinors,<sp/>z<sp/>complex)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_prod_f(z,r,s)<sp/>\</highlight></codeline>
<codeline lineno="1317"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1318"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_complex_0(z);<sp/>\</highlight></codeline>
<codeline lineno="1319"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_assign_f((z),(r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1320"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_assign_f((z),(r).c[1],(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1321"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_assign_f((z),(r).c[2],(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1322"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_assign_f((z),(r).c[3],(s).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="1323"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>z+=r*s<sp/>(r,s<sp/>spinors,<sp/>z<sp/>complex)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_prod_assign_f(z,r,s)<sp/>\</highlight></codeline>
<codeline lineno="1327"><highlight class="preprocessor"><sp/><sp/>_vector_prod_assign_f((z),(r).c[0],(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1328"><highlight class="preprocessor"><sp/><sp/>_vector_prod_assign_f((z),(r).c[1],(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1329"><highlight class="preprocessor"><sp/><sp/>_vector_prod_assign_f((z),(r).c[2],(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1330"><highlight class="preprocessor"><sp/><sp/>_vector_prod_assign_f((z),(r).c[3],(s).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=Real<sp/>part<sp/>of<sp/>the<sp/>scalar<sp/>product<sp/>(g5*r)*s<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_g5_prod_re_f(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="1334"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1335"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_re_f((k),(r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="1336"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_add_assign_re_f((k),(r).c[1],(s).c[1]);\</highlight></codeline>
<codeline lineno="1337"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_sub_assign_re_f((k),(r).c[2],(s).c[2]);\</highlight></codeline>
<codeline lineno="1338"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_sub_assign_re_f((k),(r).c[3],(s).c[3]);\</highlight></codeline>
<codeline lineno="1339"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>k=Imaginary<sp/>part<sp/>of<sp/>the<sp/>scalar<sp/>product<sp/>(g5*r)*s<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_g5_prod_im_f(k,r,s)<sp/>\</highlight></codeline>
<codeline lineno="1343"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1344"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_im_f((k),(r).c[0],(s).c[0]);\</highlight></codeline>
<codeline lineno="1345"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_add_assign_im_f((k),(r).c[1],(s).c[1]);\</highlight></codeline>
<codeline lineno="1346"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_sub_assign_im_f((k),(r).c[2],(s).c[2]);\</highlight></codeline>
<codeline lineno="1347"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_vector_prod_sub_assign_im_f((k),(r).c[3],(s).c[3]);\</highlight></codeline>
<codeline lineno="1348"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r-=z*s<sp/>(z<sp/>complex;<sp/>r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_project_f(r,z,s)<sp/>\</highlight></codeline>
<codeline lineno="1352"><highlight class="preprocessor"><sp/><sp/>_vector_project_f((r).c[0],z,(s).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1353"><highlight class="preprocessor"><sp/><sp/>_vector_project_f((r).c[1],z,(s).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1354"><highlight class="preprocessor"><sp/><sp/>_vector_project_f((r).c[2],z,(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1355"><highlight class="preprocessor"><sp/><sp/>_vector_project_f((r).c[3],z,(s).c[3])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=(1-g0)/2<sp/>*<sp/>s<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_pminus_f(r,s)<sp/>\</highlight></codeline>
<codeline lineno="1359"><highlight class="preprocessor"><sp/><sp/>_vector_add_f((r).c[0],(s).c[0],(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1360"><highlight class="preprocessor"><sp/><sp/>_vector_add_f((r).c[1],(s).c[1],(s).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="1361"><highlight class="preprocessor"><sp/><sp/>_vector_mul_f((r).c[0],0.5,(r).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1362"><highlight class="preprocessor"><sp/><sp/>_vector_mul_f((r).c[1],0.5,(r).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1363"><highlight class="preprocessor"><sp/><sp/>(r).c[2]<sp/>=<sp/>(r).c[0];<sp/>\</highlight></codeline>
<codeline lineno="1364"><highlight class="preprocessor"><sp/><sp/>(r).c[3]<sp/>=<sp/>(r).c[1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>r=(1+g0)/2<sp/>*<sp/>s<sp/>(r,s<sp/>spinors)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_spinor_pplus_f(r,s)<sp/>\</highlight></codeline>
<codeline lineno="1368"><highlight class="preprocessor"><sp/><sp/>_vector_sub_f((r).c[0],(s).c[0],(s).c[2]);<sp/>\</highlight></codeline>
<codeline lineno="1369"><highlight class="preprocessor"><sp/><sp/>_vector_sub_f((r).c[1],(s).c[1],(s).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="1370"><highlight class="preprocessor"><sp/><sp/>_vector_mul_f((r).c[0],0.5,(r).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1371"><highlight class="preprocessor"><sp/><sp/>_vector_mul_f((r).c[1],0.5,(r).c[1]);<sp/>\</highlight></codeline>
<codeline lineno="1372"><highlight class="preprocessor"><sp/><sp/>_vector_mul_f((r).c[2],-1.,(r).c[0]);<sp/>\</highlight></codeline>
<codeline lineno="1373"><highlight class="preprocessor"><sp/><sp/>_vector_mul_f((r).c[3],-1.,(r).c[1])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Read<sp/>spinor<sp/>field<sp/>component<sp/>from<sp/>GPU<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(output)<sp/>v<sp/>=<sp/>suNf_vector<sp/>;<sp/>(input)<sp/>in<sp/>=<sp/>suNf_spinor*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(input)<sp/>iy<sp/>=<sp/>site<sp/>;<sp/>(input)<sp/>x<sp/>=<sp/>0..3<sp/>spinor<sp/>component;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>read_gpu_suNf_vector_flt(stride,v,in,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="1379"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="1380"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*2)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="1381"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[0]=((hr_complex_flt*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1382"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[1]=((hr_complex_flt*)(in))[__iz];<sp/>\</highlight></codeline>
<codeline lineno="1383"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>read_gpu_suNf_vector(stride,v,in,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="1386"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="1387"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*2)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="1388"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[0]=((hr_complex*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1389"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[1]=((hr_complex*)(in))[__iz];<sp/>\</highlight></codeline>
<codeline lineno="1390"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Write<sp/>spinor<sp/>field<sp/>component<sp/>to<sp/>GPU<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(input)<sp/>v<sp/>=<sp/>suNf_vector<sp/>;<sp/>(output)<sp/>out<sp/>=<sp/>suNf_spinor*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(input)<sp/>iy<sp/>=<sp/>site<sp/>;<sp/>(input)<sp/>x<sp/>=<sp/>0..3<sp/>spinor<sp/>component;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>write_gpu_suNf_vector_flt(stride,v,out,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="1396"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="1397"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*2)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="1398"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((hr_complex_flt*)(out))[__iz]=(v).c[0];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1399"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((hr_complex_flt*)(out))[__iz]=(v).c[1];<sp/>\</highlight></codeline>
<codeline lineno="1400"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>write_gpu_suNf_vector(stride,v,out,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="1403"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="1404"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*2)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="1405"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((hr_complex*)(out))[__iz]=(v).c[0];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1406"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((hr_complex*)(out))[__iz]=(v).c[1];<sp/>\</highlight></codeline>
<codeline lineno="1407"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Read<sp/>an<sp/>suN<sp/>algebra<sp/>vector<sp/>from<sp/>GPU<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(output)<sp/>v<sp/>=<sp/>suN_algebra_vector<sp/>;<sp/>(input)<sp/>in<sp/>=<sp/>suN_algebra_vector*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(input)<sp/>iy<sp/>=<sp/>site<sp/>;<sp/>(input)<sp/>x<sp/>=<sp/>0..3<sp/>direction;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_av_flt_read_gpu(stride,v,in,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="1413"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="1414"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*3)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="1415"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[0]=((float*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1416"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[1]=((float*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1417"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[2]=((float*)(in))[__iz];<sp/>\</highlight></codeline>
<codeline lineno="1418"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_av_read_gpu(stride,v,in,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="1421"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="1422"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*3)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="1423"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[0]=((double*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1424"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[1]=((double*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1425"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[2]=((double*)(in))[__iz];<sp/>\</highlight></codeline>
<codeline lineno="1426"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Write<sp/>an<sp/>suN<sp/>algebra<sp/>vector<sp/>to<sp/>GPU<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(input)<sp/>v<sp/>=<sp/>suN_algebra_vector<sp/>;<sp/>(output)<sp/>out<sp/>=<sp/>suN_algebra_vector*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(input)<sp/>iy<sp/>=<sp/>site<sp/>;<sp/>(input)<sp/>x<sp/>=<sp/>0..3<sp/>direction;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_av_flt_write_gpu(stride,v,out,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="1432"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="1433"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*3)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="1434"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=(v).c[0];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1435"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=(v).c[1];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1436"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=(v).c[2];<sp/>\</highlight></codeline>
<codeline lineno="1437"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_suNf_av_write_gpu(stride,v,out,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="1440"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="1441"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*3)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="1442"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=(v).c[0];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1443"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=(v).c[1];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1444"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=(v).c[2];<sp/>\</highlight></codeline>
<codeline lineno="1445"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Mul_add_assign<sp/>on<sp/>a<sp/>suN<sp/>algebra<sp/>vector<sp/>on<sp/>GPU<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(in/out)<sp/>v<sp/>=<sp/>suN_algebra_vector*<sp/>;<sp/>(input)<sp/>in<sp/>=<sp/>suN_algebra_vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(input)<sp/>iy<sp/>=<sp/>site<sp/>;<sp/>(input)<sp/>x<sp/>=<sp/>0..3<sp/>direction;<sp/>(input)<sp/>r<sp/>=<sp/>real<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_algebra_vector_mul_add_assign_gpu_f_flt(stride,v,iy,x,r,in)<sp/>\</highlight></codeline>
<codeline lineno="1451"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="1452"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*3)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="1453"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(v))[__iz]+=(in).c[0]*(r);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1454"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(v))[__iz]+=(in).c[1]*(r);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1455"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(v))[__iz]+=(in).c[2]*(r);<sp/>\</highlight></codeline>
<codeline lineno="1456"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_algebra_vector_mul_add_assign_gpu_f(stride,v,iy,x,r,in)<sp/>\</highlight></codeline>
<codeline lineno="1459"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="1460"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*3)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="1461"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(v))[__iz]+=(in).c[0]*(r);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1462"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(v))[__iz]+=(in).c[1]*(r);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1463"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(v))[__iz]+=(in).c[2]*(r);<sp/>\</highlight></codeline>
<codeline lineno="1464"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Read<sp/>an<sp/>suN<sp/>matrix<sp/>from<sp/>GPU<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(output)<sp/>v<sp/>=<sp/>suN<sp/>;<sp/>(input)<sp/>in<sp/>=<sp/>suN*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(input)<sp/>iy<sp/>=<sp/>site<sp/>;<sp/>(input)<sp/>x<sp/>=<sp/>0..3<sp/>direction;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>read_gpu_suNf_flt(stride,v,in,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="1470"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="1471"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*8)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="1472"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>real_part,<sp/>imag_part;<sp/>\</highlight></codeline>
<codeline lineno="1473"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>real_part<sp/>=<sp/>((float*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1474"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imag_part<sp/>=<sp/>((float*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1475"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[0]=hr_complex(real_part,<sp/>imag_part);<sp/>\</highlight></codeline>
<codeline lineno="1476"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>real_part<sp/>=<sp/>((float*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1477"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imag_part<sp/>=<sp/>((float*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1478"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[1]=hr_complex(real_part,<sp/>imag_part);<sp/>\</highlight></codeline>
<codeline lineno="1479"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>real_part<sp/>=<sp/>((float*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1480"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imag_part<sp/>=<sp/>((float*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1481"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[2]=hr_complex(real_part,<sp/>imag_part);<sp/>\</highlight></codeline>
<codeline lineno="1482"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_part<sp/>=<sp/>((float*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1483"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imag_part<sp/>=<sp/>((float*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1484"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[3]=hr_complex(real_part,<sp/>imag_part);<sp/>\</highlight></codeline>
<codeline lineno="1485"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>read_gpu_suNf(stride,v,in,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="1488"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="1489"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*8)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="1490"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>real_part,<sp/>imag_part;<sp/>\</highlight></codeline>
<codeline lineno="1491"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>real_part<sp/>=<sp/>((double*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1492"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imag_part<sp/>=<sp/>((double*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1493"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[0]=hr_complex(real_part,<sp/>imag_part);<sp/>\</highlight></codeline>
<codeline lineno="1494"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>real_part<sp/>=<sp/>((double*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1495"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imag_part<sp/>=<sp/>((double*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1496"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[1]=hr_complex(real_part,<sp/>imag_part);<sp/>\</highlight></codeline>
<codeline lineno="1497"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>real_part<sp/>=<sp/>((double*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1498"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imag_part<sp/>=<sp/>((double*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1499"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[2]=hr_complex(real_part,<sp/>imag_part);<sp/>\</highlight></codeline>
<codeline lineno="1500"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>real_part<sp/>=<sp/>((double*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1501"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imag_part<sp/>=<sp/>((double*)(in))[__iz];<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1502"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(v).c[3]=hr_complex(real_part,<sp/>imag_part);<sp/>\</highlight></codeline>
<codeline lineno="1503"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Write<sp/>an<sp/>suN<sp/>matrix<sp/>to<sp/>GPU<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(input)<sp/>v<sp/>=<sp/>suN<sp/>;<sp/>(output)<sp/>out<sp/>=<sp/>suN*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(input)<sp/>iy<sp/>=<sp/>site<sp/>;<sp/>(input)<sp/>x<sp/>=<sp/>0..3<sp/>direction;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>write_gpu_suNf_flt(stride,v,out,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="1509"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="1510"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*8)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="1511"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=_complex_re((v).c[0]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1512"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=_complex_im((v).c[0]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1513"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=_complex_re((v).c[1]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1514"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=_complex_im((v).c[1]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1515"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=_complex_re((v).c[2]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1516"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=_complex_im((v).c[2]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1517"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=_complex_re((v).c[3]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1518"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((float*)(out))[__iz]=_complex_im((v).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="1519"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>write_gpu_suNf(stride,v,out,iy,x)<sp/>\</highlight></codeline>
<codeline lineno="1522"><highlight class="preprocessor"><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="1523"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>__iz=(iy)+((x)*8)*(stride);<sp/>\</highlight></codeline>
<codeline lineno="1524"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=_complex_re((v).c[0]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1525"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=_complex_im((v).c[0]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1526"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=_complex_re((v).c[1]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1527"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=_complex_im((v).c[1]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1528"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=_complex_re((v).c[2]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1529"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=_complex_im((v).c[2]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1530"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=_complex_re((v).c[3]);<sp/>__iz+=(stride);<sp/>\</highlight></codeline>
<codeline lineno="1531"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((double*)(out))[__iz]=_complex_im((v).c[3]);<sp/>\</highlight></codeline>
<codeline lineno="1532"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/sofie/Workspace/HiRepDocs/HiRep/Include/suN.h"/>
  </compounddef>
</doxygen>
